diff -Napur linux-linux4microchip-2022.04-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c linux-linux4microchip-2022.04/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
--- linux-linux4microchip-2022.04-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c	2022-05-06 10:11:03.000000000 -0700
+++ linux-linux4microchip-2022.04/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c	2023-04-28 16:23:01.329800563 -0700
@@ -738,6 +738,12 @@ static int stmmac_set_wol(struct net_dev
 	if (!device_can_wakeup(priv->device))
 		return -EOPNOTSUPP;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (priv != priv->hw_priv)
+		return 0;
+#endif
+
 	if (!priv->plat->pmt) {
 		int ret = phylink_ethtool_set_wol(priv->phylink, wol);
 
diff -Napur linux-linux4microchip-2022.04-orig/drivers/net/ethernet/stmicro/stmmac/stmmac.h linux-linux4microchip-2022.04/drivers/net/ethernet/stmicro/stmmac/stmmac.h
--- linux-linux4microchip-2022.04-orig/drivers/net/ethernet/stmicro/stmmac/stmmac.h	2022-05-06 10:11:03.000000000 -0700
+++ linux-linux4microchip-2022.04/drivers/net/ethernet/stmicro/stmmac/stmmac.h	2023-04-28 16:23:01.333800563 -0700
@@ -24,6 +24,28 @@
 #include <linux/reset.h>
 #include <net/page_pool.h>
 
+#if defined(CONFIG_LAN937X_SWITCH)
+#ifndef CONFIG_KSZ_SWITCH
+#define CONFIG_KSZ_SWITCH
+#endif
+#endif
+
+#ifdef CONFIG_KSZ_SWITCH
+#if defined(CONFIG_HAVE_KSZ9897)
+#include "../../micrel/ksz_cfg_9897.h"
+#elif defined(CONFIG_HAVE_KSZ8795)
+#include "../../micrel/ksz_cfg_8795.h"
+#elif defined(CONFIG_HAVE_KSZ8895)
+#include "../../micrel/ksz_cfg_8895.h"
+#elif defined(CONFIG_HAVE_KSZ8863)
+#include "../../micrel/ksz_cfg_8863.h"
+#elif defined(CONFIG_HAVE_KSZ8463)
+#include "../../micrel/ksz_cfg_8463.h"
+#elif defined(CONFIG_HAVE_LAN937X)
+#include "../../microchip/lan937x_cfg.h"
+#endif
+#endif
+
 struct stmmac_resources {
 	void __iomem *addr;
 	u8 mac[ETH_ALEN];
@@ -316,6 +338,24 @@ struct stmmac_priv {
 	/* XDP BPF Program */
 	unsigned long *af_xdp_zc_qps;
 	struct bpf_prog *xdp_prog;
+
+#ifdef CONFIG_KSZ_SWITCH
+	struct platform_device	*sw_pdev;
+	struct stmmac_priv	*hw_priv;
+	struct ksz_port		port;
+	int			phy_addr;
+	u32			multi:1;
+	u32			promisc:1;
+	u8			opened;
+	u8			hw_multi;
+	u8			hw_promisc;
+	void			*parent;
+	struct delayed_work	promisc_reset;
+	struct ksz_sw_sysfs	sysfs;
+#ifdef CONFIG_1588_PTP
+	struct ksz_ptp_sysfs	ptp_sysfs;
+#endif
+#endif
 };
 
 enum stmmac_state {
diff -Napur linux-linux4microchip-2022.04-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c linux-linux4microchip-2022.04/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
--- linux-linux4microchip-2022.04-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c	2022-05-06 10:11:03.000000000 -0700
+++ linux-linux4microchip-2022.04/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c	2023-08-09 22:15:16.000000000 -0700
@@ -44,6 +44,59 @@
 #include "stmmac_ptp.h"
 #include "stmmac.h"
 #include "stmmac_xdp.h"
+
+#if defined(CONFIG_KSZ_SWITCH_EMBEDDED)
+#include <linux/of_irq.h>
+#include <linux/of_net.h>
+#include <linux/spi/spi.h>
+#include <linux/ip.h>
+#include <net/ip.h>
+#include <net/ipv6.h>
+
+/* Need to predefine get_sysfs_data. */
+
+#ifndef get_sysfs_data
+struct ksz_port;
+
+static void get_sysfs_data_(struct net_device *dev,
+	struct semaphore **proc_sem, struct ksz_port **port);
+
+#define get_sysfs_data		get_sysfs_data_
+#endif
+
+#define DO_NOT_USE_COPY_SKB
+
+#if defined(CONFIG_IBA_KSZ9897)
+#include "../../micrel/iba-ksz9897.c"
+#elif defined(CONFIG_HAVE_KSZ9897)
+#include "../../micrel/i2c-ksz9897.c"
+#elif defined(CONFIG_HAVE_KSZ8795)
+#include "../../micrel/spi-ksz8795.c"
+#elif defined(CONFIG_SMI_KSZ8895)
+#include "../../micrel/smi-ksz8895.c"
+#elif defined(CONFIG_HAVE_KSZ8895)
+#include "../../micrel/spi-ksz8895.c"
+#elif defined(CONFIG_SMI_KSZ8863)
+#include "../../micrel/smi-ksz8863.c"
+#elif defined(CONFIG_HAVE_KSZ8863)
+#include "../../micrel/i2c-ksz8863.c"
+#elif defined(CONFIG_IBA_LAN937X)
+#include "../../microchip/iba-lan937x.c"
+#elif defined(CONFIG_SMI_LAN937X)
+#include "../../microchip/smi-lan937x.c"
+#elif defined(CONFIG_HAVE_LAN937X)
+#include "../../microchip/spi-lan937x.c"
+#endif
+#endif
+
+#if defined(CONFIG_KSZ_SWITCH) && !defined(CONFIG_KSZ_SWITCH_EMBEDDED)
+#ifdef CONFIG_HAVE_LAN937X
+#include "../../microchip/lan937x_dev.h"
+#else
+#include "../../micrel/ksz_spi_net.h"
+#endif
+#endif
+
 #include <linux/reset.h>
 #include <linux/of_mdio.h>
 #include "dwmac1000.h"
@@ -173,6 +226,362 @@ int stmmac_bus_clks_config(struct stmmac
 }
 EXPORT_SYMBOL_GPL(stmmac_bus_clks_config);
 
+#ifdef CONFIG_KSZ_SWITCH
+
+#if !defined(get_sysfs_data) || defined(CONFIG_KSZ_SWITCH_EMBEDDED)
+static void get_sysfs_data_(struct net_device *dev,
+	struct semaphore **proc_sem, struct ksz_port **port)
+{
+	struct stmmac_priv *priv = netdev_priv(dev);
+	struct sw_priv *hw_priv;
+
+	hw_priv = priv->parent;
+	*port = &priv->port;
+	*proc_sem = &hw_priv->proc_sem;
+}  /* get_sysfs_data */
+#endif
+
+#ifndef get_sysfs_data
+#define get_sysfs_data		get_sysfs_data_
+#endif
+
+#if !defined(CONFIG_KSZ_SWITCH_EMBEDDED)
+#define USE_SPEED_LINK
+#define USE_MIB
+
+#if defined(CONFIG_HAVE_KSZ9897)
+#include "../../micrel/ksz_sw_sysfs_9897.c"
+#elif defined(CONFIG_HAVE_KSZ8795)
+#include "../../micrel/ksz_sw_sysfs_8795.c"
+#elif defined(CONFIG_HAVE_KSZ8895)
+#include "../../micrel/ksz_sw_sysfs_8895.c"
+#elif defined(CONFIG_HAVE_KSZ8863)
+#include "../../micrel/ksz_sw_sysfs.c"
+#elif defined(CONFIG_HAVE_KSZ8463)
+#include "../../micrel/ksz_sw_sysfs.c"
+#elif defined(CONFIG_HAVE_LAN937X)
+#include "../../microchip/lan937x_sw_sysfs.c"
+#endif
+
+#ifdef CONFIG_1588_PTP
+#if defined(CONFIG_HAVE_KSZ9897)
+#include "../../micrel/ksz_ptp_sysfs.c"
+#elif defined(CONFIG_HAVE_LAN937X)
+#include "../../microchip/lan937x_ptp_sysfs.c"
+#endif
+#endif
+
+#ifdef CONFIG_KSZ_DLR
+#include "../../micrel/ksz_dlr_sysfs.c"
+#endif
+#endif
+
+static inline int sw_is_switch(struct ksz_sw *sw)
+{
+	return sw != NULL;
+}
+
+static int sw_device_seen;
+
+#if !defined(CONFIG_KSZ_IBA_ONLY)
+static struct ksz_sw *check_avail_switch(struct net_device *netdev, int id)
+{
+	int phy_mode;
+	char phy_id[MII_BUS_ID_SIZE];
+	char bus_id[MII_BUS_ID_SIZE];
+	struct ksz_sw *sw = NULL;
+	struct phy_device *phydev = NULL;
+
+	/* Check whether MII switch exists. */
+	phy_mode = PHY_INTERFACE_MODE_MII;
+	snprintf(bus_id, MII_BUS_ID_SIZE, "sw.%d", id);
+	snprintf(phy_id, MII_BUS_ID_SIZE, PHY_ID_FMT, bus_id, 0);
+	phydev = phy_attach(netdev, phy_id, phy_mode);
+	if (!IS_ERR(phydev)) {
+		struct phy_priv *phydata = phydev->priv;
+
+		sw = phydata->port->sw;
+
+		/*
+		 * In case multiple devices mode is used and this phydev is not
+		 * attached again.
+		 */
+		if (sw)
+			phydev->interface = sw->interface;
+		phy_detach(phydev);
+	}
+	return sw;
+}  /* check_avail_switch */
+
+static int stmmac_sw_chk(struct stmmac_priv *priv)
+{
+	struct ksz_sw *sw;
+
+	sw = priv->port.sw;
+	if (!sw) {
+		sw = check_avail_switch(priv->dev, sw_device_seen);
+		if (!sw_is_switch(sw))
+			return -ENXIO;
+	}
+	priv->port.sw = sw;
+	return 0;
+}
+#endif
+
+#if defined(CONFIG_KSZ_IBA_ONLY) || defined(CONFIG_KSZ_SMI)
+static int get_sw_irq(struct stmmac_priv *priv, struct device **ext_dev)
+{
+	struct device *dev;
+	int spi_bus;
+	int spi_select;
+	char name[20];
+
+	spi_select = 0;
+	for (spi_bus = 0; spi_bus < 2; spi_bus++) {
+		sprintf(name, "spi%d.%d\n", spi_bus, spi_select);
+		dev = bus_find_device_by_name(&spi_bus_type, NULL, name);
+		if (dev && dev->of_node) {
+			int irq = of_irq_get(dev->of_node, 0);
+
+			if (ext_dev)
+				*ext_dev = dev;
+			return irq;
+		}
+	}
+	return -1;
+}  /* get_sw_irq */
+#endif
+
+static void stop_dev_queues(struct ksz_sw *sw, struct net_device *hw_dev,
+			    struct stmmac_priv *priv, struct netdev_queue *q)
+{
+	if (sw_is_switch(sw)) {
+		struct net_device *dev;
+		int p;
+		int dev_count = sw->dev_count + sw->dev_offset;
+
+		for (p = 0; p < dev_count; p++) {
+			dev = sw->netdev[p];
+			if (!dev || dev == hw_dev)
+				continue;
+			if (netif_running(dev) || dev == priv->dev) {
+				netif_tx_stop_queue(q);
+			}
+		}
+	}
+}  /* stop_dev_queues */
+
+static void wake_dev_queues(struct ksz_sw *sw, struct net_device *hw_dev,
+			    struct netdev_queue *q)
+{
+	if (sw_is_switch(sw)) {
+		struct net_device *dev;
+		int p;
+		int dev_count = sw->dev_count + sw->dev_offset;
+
+		for (p = 0; p < dev_count; p++) {
+			dev = sw->netdev[p];
+			if (!dev || dev == hw_dev)
+				continue;
+			if (netif_running(dev)) {
+				if (netif_tx_queue_stopped(q))
+					netif_tx_wake_queue(q);
+			}
+		}
+		wake_up_interruptible(&sw->queue);
+	}
+}  /* wake_dev_queues */
+
+#if defined(CONFIG_HAVE_KSZ9897) || defined(CONFIG_HAVE_LAN937X)
+static int priv_multi(void *ptr)
+{
+	struct stmmac_priv *priv = ptr;
+
+	return (priv->multi & 1);
+}  /* priv_multi */
+#endif
+
+static int priv_promisc(void *ptr)
+{
+	struct stmmac_priv *priv = ptr;
+
+	return priv->promisc;
+}  /* priv_promisc */
+
+#if !defined(CONFIG_HAVE_KSZ9897) && !defined(CONFIG_HAVE_LAN937X)
+static int priv_match_multi(void *ptr, u8 *data)
+{
+	struct netdev_hw_addr *ha;
+	struct stmmac_priv *priv = ptr;
+	int drop = true;
+
+	netdev_for_each_mc_addr(ha, priv->dev) {
+		if (!memcmp(data, ha->addr, ETH_ALEN)) {
+			drop = false;
+			break;
+		}
+	}
+	return drop;
+}  /* priv_match_multi */
+#endif
+
+static struct stmmac_priv *sw_rx_proc(struct ksz_sw *sw, struct sk_buff *skb,
+	int *ptp_tag, struct net_device **parent_dev,
+	struct sk_buff **parent_skb)
+{
+	struct net_device *dev;
+	struct stmmac_priv *priv;
+	int len = skb->len;
+	int rx_port = 0;
+#if defined(CONFIG_KSZ_SWITCH) || defined(CONFIG_1588_PTP)
+	int forward = 0;
+	int tag = 0;
+	void *ptr = NULL;
+	void (*rx_tstamp)(void *ptr, struct sk_buff *skb) = NULL;
+#endif
+#if defined(CONFIG_KSZ_SWITCH)
+	int extra_skb;
+#endif
+#ifdef CONFIG_1588_PTP
+	struct ptp_info *ptp = &sw->ptp_hw;
+#endif
+
+	*parent_skb = NULL;
+
+	dev = sw->net_ops->rx_dev(sw, skb->data, &len, &tag, &rx_port);
+	if (!dev) {
+		dev_kfree_skb_any(skb);
+		return NULL;
+	}
+
+	/* vlan_get_tag requires network device in socket buffer. */
+	skb->dev = dev;
+
+	/* skb_put is already used. */
+	if (len != skb->len) {
+		int diff = skb->len - len;
+
+		skb->len -= diff;
+		skb->tail -= diff;
+		len = skb->len;
+	}
+
+	priv = netdev_priv(dev);
+
+	/* Internal packets handled by the switch. */
+	if (!sw->net_ops->drv_rx(sw, skb, rx_port)) {
+		priv->dev->stats.rx_packets++;
+		priv->dev->stats.rx_bytes += len;
+		return NULL;
+	}
+
+	if (!sw->net_ops->match_pkt(sw, &dev, (void **) &priv, priv_promisc,
+#if defined(CONFIG_HAVE_KSZ9897) || defined(CONFIG_HAVE_LAN937X)
+	    priv_multi,
+#else
+	    priv_match_multi,
+#endif
+	    skb, priv->hw_priv->hw_promisc)) {
+		dev_kfree_skb_irq(skb);
+		return NULL;
+	}
+
+#ifdef CONFIG_1588_PTP
+	ptr = ptp;
+	if (sw->features & PTP_HW) {
+		if (ptp->ops->drop_pkt(ptp, skb, sw->vlan_id, &tag, ptp_tag,
+				       &forward)) {
+			dev_kfree_skb_any(skb);
+			return NULL;
+		}
+		if (*ptp_tag)
+			rx_tstamp = ptp->ops->get_rx_tstamp;
+	}
+#endif
+
+#if defined(CONFIG_KSZ_SWITCH)
+	/* Need to forward to VLAN devices for PAE messages. */
+	if (!forward) {
+		struct ethhdr *eth = (struct ethhdr *) skb->data;
+
+		if (eth->h_proto == htons(0x888E))
+			forward = FWD_VLAN_DEV | FWD_STP_DEV;
+	}
+
+	/* No VLAN port forwarding; need to send to parent. */
+	if ((forward & FWD_VLAN_DEV) && !tag)
+		forward &= ~FWD_VLAN_DEV;
+	dev = sw->net_ops->parent_rx(sw, dev, skb, &forward, parent_dev,
+		parent_skb);
+
+	/* dev may change. */
+	if (dev != skb->dev) {
+		skb->dev = dev;
+		priv = netdev_priv(dev);
+	}
+	extra_skb = (parent_skb != NULL);
+
+	extra_skb |= sw->net_ops->port_vlan_rx(sw, dev, *parent_dev, skb,
+		forward, tag, ptr, rx_tstamp);
+#endif
+	return priv;
+}  /* sw_rx_proc */
+
+static void hw_set_multicast(struct stmmac_priv *priv, int multicast)
+{
+}  /* hw_set_multicast */
+
+static void hw_set_promisc(struct stmmac_priv *priv, int promisc)
+{
+}  /* hw_set_promisc */
+
+static void dev_set_multicast(struct stmmac_priv *priv, int multicast)
+{
+	if (multicast != priv->multi) {
+		struct stmmac_priv *hw_priv = priv->hw_priv;
+		u8 hw_multi = hw_priv->hw_multi;
+
+		if (multicast)
+			++hw_priv->hw_multi;
+		else
+			--hw_priv->hw_multi;
+		priv->multi = multicast;
+
+		/* Turn on/off all multicast mode. */
+		if (hw_priv->hw_multi <= 1 && hw_multi <= 1)
+			hw_set_multicast(hw_priv, hw_priv->hw_multi);
+	}
+}  /* dev_set_multicast */
+
+static void dev_set_promisc(struct stmmac_priv *priv, int promisc)
+{
+	if (promisc != priv->promisc) {
+		struct stmmac_priv *hw_priv = priv->hw_priv;
+		u8 hw_promisc = hw_priv->hw_promisc;
+
+		if (promisc)
+			++hw_priv->hw_promisc;
+		else
+			--hw_priv->hw_promisc;
+		priv->promisc = promisc;
+
+		/* Turn on/off promiscuous mode. */
+		if (hw_priv->hw_promisc <= 1 && hw_promisc <= 1)
+			hw_set_promisc(hw_priv, hw_priv->hw_promisc);
+	}
+}  /* dev_set_promisc */
+
+static void promisc_reset_work(struct work_struct *work)
+{
+	struct delayed_work *dwork = to_delayed_work(work);
+	struct stmmac_priv *hw_priv =
+		container_of(dwork, struct stmmac_priv, promisc_reset);
+
+	hw_priv->hw_promisc = 0;
+	hw_set_promisc(hw_priv, hw_priv->promisc);
+}  /* promisc_reset_work */
+#endif
+
 /**
  * stmmac_verify_args - verify the driver parameters.
  * Description: it checks the driver parameters and set a default in case of
@@ -1075,6 +1484,21 @@ static void stmmac_mac_link_down(struct
 {
 	struct stmmac_priv *priv = netdev_priv(to_net_dev(config->dev));
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = priv->hw_priv;
+	if (sw_is_switch(priv->port.sw)) {
+
+#if defined(CONFIG_KSZ_IBA_ONLY)
+		/* Cannot turn off queue while IBA is being used. */
+		if (priv->port.need_mac)
+			return;
+#endif
+		if (interface == PHY_INTERFACE_MODE_INTERNAL) {
+			return;
+		}
+	}
+	priv->port.ready = false;
+#endif
 	stmmac_mac_set(priv, priv->ioaddr, false);
 	priv->eee_active = false;
 	priv->tx_lpi_enabled = false;
@@ -1094,6 +1518,17 @@ static void stmmac_mac_link_up(struct ph
 	struct stmmac_priv *priv = netdev_priv(to_net_dev(config->dev));
 	u32 ctrl;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = priv->hw_priv;
+	if (sw_is_switch(priv->port.sw)) {
+		if (interface == PHY_INTERFACE_MODE_INTERNAL) {
+			return;
+		}
+	}
+
+	/* MAC is ready to send after function ends. */
+	priv->port.ready = true;
+#endif
 	ctrl = readl(priv->ioaddr + MAC_CTRL_REG);
 	ctrl &= ~priv->hw->link.speed_mask;
 
@@ -1230,6 +1665,19 @@ static int stmmac_init_phy(struct net_de
 	struct device_node *node;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (priv->phylink) {
+		struct ksz_sw *sw = priv->port.sw;
+
+		if (sw_is_switch(sw)) {
+			struct phy_device *phydev;
+
+			phydev = priv->port.phydev;
+			ret = phylink_connect_phy(priv->phylink, phydev);
+			return ret;
+		}
+	}
+#endif
 	node = priv->plat->phylink_node;
 
 	if (node)
@@ -1261,6 +1709,12 @@ static int stmmac_init_phy(struct net_de
 	return ret;
 }
 
+#ifdef CONFIG_KSZ_SMI
+/* Defined in stmmac_mdio.c. */
+int stmmac_smi_read(struct mii_bus *bus, int phy_id, int regnum);
+int stmmac_smi_write(struct mii_bus *bus, int phy_id, int regnum, u16 val);
+#endif
+
 static int stmmac_phy_setup(struct stmmac_priv *priv)
 {
 	struct stmmac_mdio_bus_data *mdio_bus_data = priv->plat->mdio_bus_data;
@@ -1278,6 +1732,25 @@ static int stmmac_phy_setup(struct stmma
 	if (!fwnode)
 		fwnode = dev_fwnode(priv->device);
 
+#if defined(CONFIG_KSZ_SWITCH) && !defined(CONFIG_KSZ_IBA_ONLY)
+	do {
+		int err = 0;
+
+#ifdef CONFIG_KSZ_SMI
+		int irq = get_sw_irq(priv, NULL);
+
+		err = smi_probe(&priv->sw_pdev, priv->mii, irq,
+				stmmac_smi_read, stmmac_smi_write);
+#endif
+		if (!err)
+			err = stmmac_sw_chk(priv);
+
+		/* Switch driver defines its own phylink. */
+		if (!err)
+			return 0;
+	} while (0);
+#endif
+
 	phylink = phylink_create(&priv->phylink_config, fwnode,
 				 mode, &stmmac_phylink_mac_ops);
 	if (IS_ERR(phylink))
@@ -2629,6 +3102,11 @@ static int stmmac_tx_clean(struct stmmac
 		netif_dbg(priv, tx_done, priv->dev,
 			  "%s: restart transmit\n", __func__);
 		netif_tx_wake_queue(netdev_get_tx_queue(priv->dev, queue));
+
+#ifdef CONFIG_KSZ_SWITCH
+		wake_dev_queues(priv->port.sw, priv->dev,
+				netdev_get_tx_queue(priv->dev, queue));
+#endif
 	}
 
 	if (tx_q->xsk_pool) {
@@ -2697,6 +3175,11 @@ static void stmmac_tx_err(struct stmmac_
 
 	priv->dev->stats.tx_errors++;
 	netif_tx_wake_queue(netdev_get_tx_queue(priv->dev, chan));
+
+#ifdef CONFIG_KSZ_SWITCH
+	wake_dev_queues(priv->port.sw, priv->dev,
+			netdev_get_tx_queue(priv->dev, chan));
+#endif
 }
 
 /**
@@ -3255,6 +3738,305 @@ static int stmmac_fpe_start_wq(struct st
 	return 0;
 }
 
+#ifdef CONFIG_KSZ_SWITCH
+#if defined(CONFIG_HAVE_KSZ9897) || defined(CONFIG_HAVE_LAN937X)
+static int get_net_ready(struct net_device *dev)
+{
+	struct stmmac_priv *priv = netdev_priv(dev);
+
+	return priv->hw_priv->port.ready;
+}  /* get_net_ready */
+#endif
+
+static void prep_sw_first(struct ksz_sw *sw, int *port_count,
+	int *mib_port_count, int *dev_count, char *dev_name)
+{
+	*port_count = 1;
+	*mib_port_count = 1;
+	*dev_count = 1;
+	dev_name[0] = '\0';
+#if defined(CONFIG_HAVE_KSZ9897) || defined(CONFIG_HAVE_LAN937X)
+	sw->net_ops->get_ready = get_net_ready;
+#endif
+	sw->net_ops->setup_special(sw, port_count, mib_port_count, dev_count,
+				   &stmmac_phylink_mac_ops);
+}  /* prep_sw_first */
+
+static void prep_sw_dev(struct ksz_sw *sw, struct stmmac_priv *priv, int i,
+	int port_count, int mib_port_count, char *dev_name)
+{
+	priv->phy_addr = sw->net_ops->setup_dev(sw, priv->dev, dev_name,
+		&priv->port, i, port_count, mib_port_count);
+
+	/* Use the phylink created by the switch driver. */
+	if (!priv->phylink)
+		priv->phylink = priv->port.pl;
+}  /* prep_sw_dev */
+
+static int stmmac_sw_init(struct stmmac_priv *priv)
+{
+	struct ksz_sw *sw;
+	int err;
+	int i;
+	int port_count;
+	int dev_count;
+	int mib_port_count;
+	char dev_label[IFNAMSIZ];
+	struct stmmac_priv *hw_priv;
+	struct net_device *dev;
+	struct net_device *main_dev;
+	struct device *device;
+	netdev_features_t features;
+
+	sw = priv->port.sw;
+
+	/* This is the main private structure holding hardware information. */
+	hw_priv = priv;
+	hw_priv->parent = sw->dev;
+	main_dev = priv->dev;
+	device = priv->device;
+	features = main_dev->features;
+
+	prep_sw_first(sw, &port_count, &mib_port_count, &dev_count, dev_label);
+
+	/* The main switch phydev will not be attached. */
+	if (dev_count > 1) {
+		struct phy_device *phydev = sw->phy[0];
+
+		phydev->interface = priv->plat->phy_interface;
+	}
+
+	/* Save the base device name. */
+	strlcpy(dev_label, hw_priv->dev->name, IFNAMSIZ);
+
+#ifndef CONFIG_KSZ_SMI
+	if (sw->net_ops->setup_mdiobus)
+		sw->net_ops->setup_mdiobus(sw, priv->mii);
+#endif
+	prep_sw_dev(sw, priv, 0, port_count, mib_port_count, dev_label);
+
+	INIT_DELAYED_WORK(&hw_priv->promisc_reset, promisc_reset_work);
+
+	for (i = 1; i < dev_count; i++) {
+		dev = devm_alloc_etherdev_mqs(device,
+					      sizeof(struct stmmac_priv),
+					      MTL_MAX_TX_QUEUES,
+					      MTL_MAX_RX_QUEUES);
+		if (!dev)
+			break;
+
+		priv = netdev_priv(dev);
+		priv->dev = dev;
+
+		priv->hw_priv = hw_priv;
+		priv->device = device;
+		priv->plat = hw_priv->plat;
+
+		mutex_init(&priv->lock);
+
+		dev->netdev_ops = main_dev->netdev_ops;
+		dev->ethtool_ops = main_dev->ethtool_ops;
+
+		dev->base_addr = main_dev->base_addr;
+		memcpy(dev->dev_addr, main_dev->dev_addr, ETH_ALEN);
+
+		dev->hw_features = main_dev->hw_features;
+		dev->features = features;
+
+		SET_NETDEV_DEV(dev, device);
+
+		prep_sw_dev(sw, priv, i, port_count, mib_port_count, dev_label);
+
+		err = register_netdev(dev);
+		if (err) {
+			free_netdev(dev);
+			break;
+		}
+
+		netif_carrier_off(dev);
+	}
+
+#if !defined(CONFIG_KSZ_IBA_ONLY)
+	/*
+	 * Adding sysfs support is optional for network device.  It is more
+	 * convenient to locate eth0 more or less than spi<bus>.<select>,
+	 * especially when the bus number is auto assigned which results in a
+	 * very big number.
+	 */
+	err = init_sw_sysfs(sw, &hw_priv->sysfs, &main_dev->dev);
+
+#ifdef CONFIG_1588_PTP
+	if (sw->features & PTP_HW)
+		err = init_ptp_sysfs(&hw_priv->ptp_sysfs, &main_dev->dev);
+#endif
+#ifdef CONFIG_KSZ_DLR
+	if (sw->features & DLR_HW)
+		err = init_dlr_sysfs(&main_dev->dev);
+#endif
+#endif
+
+	sw_device_seen++;
+
+	return 0;
+}
+
+#if defined(CONFIG_KSZ_IBA_ONLY)
+/**
+ * netdev_start_iba - Start using IBA for register access
+ *
+ * This routine starts using IBA for register access.
+ */
+static void netdev_start_iba(struct work_struct *work)
+{
+	struct delayed_work *dwork = to_delayed_work(work);
+	struct ksz_sw *sw = container_of(dwork, struct ksz_sw, set_ops);
+	struct ksz_iba_info *iba = &sw->info->iba;
+	struct net_device *dev = sw->main_dev;
+	struct ksz_port *port = sw->main_port;
+	struct stmmac_priv *priv;
+	int rx_mode;
+
+	if (2 != iba->use_iba)
+		return;
+
+	/* Communication is not ready if a cable connection is used. */
+	if (!port->ready) {
+		port->iba_ready = false;
+		schedule_delayed_work(&sw->set_ops, 1);
+		return;
+	}
+
+	/* Need some time after link is established. */
+	if (!port->iba_ready) {
+		port->iba_ready = true;
+		schedule_delayed_work(&sw->set_ops, 10);
+		return;
+	}
+
+	priv = netdev_priv(dev);
+
+	sw->reg = &sw_iba_ops;
+	iba->cnt = 0;
+	if (ksz_probe_next(sw->dev)) {
+		priv->parent = NULL;
+		priv->port.sw = NULL;
+		return;
+	}
+
+#ifdef CONFIG_1588_PTP
+	sw->ptp_hw.reg = &ptp_iba_ops;
+#endif
+
+	stmmac_sw_init(priv);
+
+	priv->multi = false;
+	priv->promisc = false;
+
+	priv->hw_multi = 0;
+	priv->hw_promisc = 0;
+	rx_mode = sw->net_ops->open_dev(sw, dev, &priv->port, dev->dev_addr);
+	if (rx_mode & 1) {
+		priv->hw_multi = 1;
+		hw_set_multicast(priv, priv->hw_multi);
+	}
+	if (rx_mode & 2) {
+		priv->hw_promisc = 1;
+		hw_set_promisc(priv, priv->hw_promisc);
+	}
+	sw->net_ops->open(sw);
+
+	sw->net_ops->open_port(sw, dev, &priv->port);
+	priv->opened++;
+
+	/* Signal IBA initialization is complete. */
+	if (2 == sw->info->iba.use_iba)
+		sw->info->iba.use_iba = 3;
+}  /* netdev_start_iba */
+
+static int create_sw_dev(struct net_device *dev, struct stmmac_priv *priv)
+{
+	struct sw_priv *ks;
+	struct ksz_sw *sw;
+
+	/*
+	 * Stop normal traffic from going out until the switch is
+	 * configured to block looping frames.
+	 */
+	netif_carrier_off(dev);
+
+	ks = kzalloc(sizeof(struct sw_priv), GFP_KERNEL);
+	if (!ks)
+		return -ENOMEM;
+	ks->hw_dev = dev;
+	ks->dev = &dev->dev;
+
+	ks->irq = get_sw_irq(priv, &ks->of_dev);
+
+	intr_mode = 1;
+	sw_device_present = 0;
+	sw = &ks->sw;
+	ksz_probe_prep(ks, dev);
+
+	sw->net_ops->get_ready = get_net_ready;
+	sw->netdev[0] = dev;
+	sw->netport[0] = &priv->port;
+	sw->main_dev = dev;
+	sw->main_port = &priv->port;
+	sw->dev_count = 1;
+
+	INIT_DELAYED_WORK(&sw->set_ops, netdev_start_iba);
+
+	sw_set_dev(sw, dev, dev->dev_addr);
+
+	priv->parent = sw->dev;
+	priv->port.sw = sw;
+
+	sw->main_port->iba_ready = true;
+
+#ifdef DEBUG_MSG
+	init_dbg();
+#endif
+	return 0;
+}  /* create_sw_dev */
+#endif
+
+static void stmmac_sw_exit(struct stmmac_priv *priv)
+{
+	struct net_device *dev = priv->dev;
+	struct ksz_sw *sw = priv->port.sw;
+	int i;
+
+#if !defined(CONFIG_KSZ_IBA_ONLY)
+#ifdef CONFIG_KSZ_DLR
+	if (sw->features & DLR_HW)
+		exit_dlr_sysfs(&dev->dev);
+#endif
+#ifdef CONFIG_1588_PTP
+	if (sw->features & PTP_HW)
+		exit_ptp_sysfs(&priv->ptp_sysfs, &dev->dev);
+#endif
+	exit_sw_sysfs(sw, &priv->sysfs, &dev->dev);
+#endif
+	if (priv->port.pl == priv->phylink)
+		priv->port.pl = NULL;
+	for (i = 1; i < sw->dev_count + sw->dev_offset; i++) {
+		dev = sw->netdev[i];
+		if (!dev)
+			continue;
+		priv = netdev_priv(dev);
+		flush_work(&priv->port.link_update);
+		if (priv->phylink) {
+			if (priv->port.pl == priv->phylink)
+				priv->port.pl = NULL;
+			phylink_destroy(priv->phylink);
+			priv->phylink = NULL;
+		}
+		unregister_netdev(dev);
+		free_netdev(dev);
+	}
+}
+#endif
+
 /**
  * stmmac_hw_setup - setup mac in a usable state.
  *  @dev : pointer to the device structure.
@@ -3694,6 +4476,31 @@ static int stmmac_open(struct net_device
 	u32 chan;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct stmmac_priv *net_priv = priv;
+	int rx_mode = 0;
+	struct ksz_sw *sw = priv->port.sw;
+
+	if (sw_is_switch(sw)) {
+		priv = net_priv->hw_priv;
+		net_priv->multi = false;
+		net_priv->promisc = false;
+		if (priv->opened > 0) {
+			netif_carrier_off(dev);
+			goto skip_hw;
+		}
+		if (0 == priv->opened) {
+			struct net_device *main_dev = priv->dev;
+
+			/* Need to wait for MAC ready to start operation. */
+			priv->port.ready = false;
+			priv->hw_multi = 0;
+			priv->hw_promisc = 0;
+			rx_mode = sw->net_ops->open_dev(sw, main_dev,
+				&priv->port, main_dev->dev_addr);
+		}
+	}
+#endif
 	ret = pm_runtime_get_sync(priv->device);
 	if (ret < 0) {
 		pm_runtime_put_noidle(priv->device);
@@ -3724,6 +4531,11 @@ static int stmmac_open(struct net_device
 	if (bfsize < BUF_SIZE_16KiB)
 		bfsize = stmmac_set_bfsize(dev->mtu, priv->dma_buf_sz);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (sw_is_switch(sw)) {
+		bfsize += sw->net_ops->get_mtu(sw);
+	}
+#endif
 	priv->dma_buf_sz = bfsize;
 	buf_sz = bfsize;
 
@@ -3774,9 +4586,52 @@ static int stmmac_open(struct net_device
 		goto irq_error;
 
 	stmmac_enable_all_queues(priv);
+
+#ifdef CONFIG_KSZ_SWITCH
+	if (sw_is_switch(sw)) {
+		bool start_phylink;
+
+		if (0 == priv->opened) {
+			if (rx_mode & 1) {
+				priv->hw_multi = 1;
+				hw_set_multicast(priv, priv->hw_multi);
+			}
+			if (rx_mode & 2) {
+				priv->hw_promisc = 1;
+				hw_set_promisc(priv, priv->hw_promisc);
+			}
+			sw->net_ops->open(sw);
+		}
+
+skip_hw:
+		/* The function is called when starting hardware. */
+		start_phylink = (priv->opened > 0);
+		priv->opened++;
+		priv = net_priv;
+		if (start_phylink)
+			phylink_start(priv->phylink);
+	}
+#endif
+
 	netif_tx_start_all_queues(priv->dev);
 	stmmac_enable_all_dma_irq(priv);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (sw_is_switch(sw)) {
+		struct phy_device *phydev;
+
+		phydev = priv->port.phydev;
+
+		/* Do not want polling done. */
+		phy_stop_machine(phydev);
+		sw->net_ops->open_port(sw, dev, &priv->port);
+	}
+#endif
+#if defined(CONFIG_KSZ_IBA_ONLY)
+	if (!sw_is_switch(sw))
+		create_sw_dev(dev, priv);
+#endif
+
 	return 0;
 
 irq_error:
@@ -3805,6 +4660,52 @@ static void stmmac_fpe_stop_wq(struct st
 	netdev_info(priv->dev, "FPE workqueue stop");
 }
 
+#ifdef CONFIG_KSZ_SWITCH
+static bool stmmac_sw_close(struct net_device *dev, struct stmmac_priv *priv)
+{
+	struct stmmac_priv *net_priv = priv;
+	struct ksz_sw *sw = priv->port.sw;
+	bool skip_hw = false;
+
+	if (!sw_is_switch(sw))
+		return skip_hw;
+
+#if defined(CONFIG_KSZ_IBA_ONLY)
+
+	/* Still under initialization in IBA-only mode. */
+	if (2 == sw->info->iba.use_iba) {
+		cancel_delayed_work_sync(&sw->set_ops);
+
+		/* May not started yet. */
+		if (2 == sw->info->iba.use_iba) {
+			kfree(sw->dev);
+			priv->port.sw = NULL;
+			return skip_hw;
+		}
+	}
+#endif
+	priv = net_priv->hw_priv;
+	dev_set_multicast(net_priv, false);
+	dev_set_promisc(net_priv, false);
+	sw->net_ops->close_port(sw, dev, &net_priv->port);
+	priv->opened--;
+	if (!priv->opened) {
+		sw->net_ops->close(sw);
+		sw->net_ops->stop(sw, true);
+
+#if defined(CONFIG_KSZ_IBA_ONLY)
+		sw->net_ops->leave_dev(sw);
+		ksz_remove(sw->dev);
+		priv->port.sw = NULL;
+#endif
+	} else {
+		netif_carrier_off(dev);
+		skip_hw = true;
+	}
+	return skip_hw;
+}
+#endif
+
 /**
  *  stmmac_release - close entry point of the driver
  *  @dev : device pointer.
@@ -3824,6 +4725,11 @@ static int stmmac_release(struct net_dev
 	phylink_stop(priv->phylink);
 	phylink_disconnect_phy(priv->phylink);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (stmmac_sw_close(dev, priv))
+		return 0;
+#endif
+
 	stmmac_disable_all_queues(priv);
 
 	for (chan = 0; chan < priv->plat->tx_queues_to_use; chan++)
@@ -4244,12 +5150,40 @@ static netdev_tx_t stmmac_xmit(struct sk
 	int entry, first_tx;
 	dma_addr_t des;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_port *port = &priv->port;
+	struct ksz_sw *sw = priv->port.sw;
+	int header = 0;
+	int len = skb->len;
+
+	/* May be called from switch driver. */
+	if (netif_tx_queue_stopped(netdev_get_tx_queue(dev, queue)))
+		return NETDEV_TX_BUSY;
+
+	if (sw_is_switch(sw))
+		len = sw->net_ops->get_tx_len(sw, skb, port->first_port,
+			&header);
+
+	if (priv != priv->hw_priv) {
+		priv = priv->hw_priv;
+	}
+#endif
+
 	tx_q = &priv->tx_queue[queue];
 	first_tx = tx_q->cur_tx;
 
 	if (priv->tx_path_in_lpi_mode && priv->eee_sw_timer_en)
 		stmmac_disable_eee_mode(priv);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (sw_is_switch(sw)) {
+		skb = sw->net_ops->final_skb(sw, skb, dev, port);
+		if (!skb) {
+			return NETDEV_TX_OK;
+		}
+	}
+#endif
+
 	/* Manage oversized TCP frames for GMAC4 device */
 	if (skb_is_gso(skb) && priv->tso) {
 		if (gso & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6))
@@ -4262,6 +5196,11 @@ static netdev_tx_t stmmac_xmit(struct sk
 		if (!netif_tx_queue_stopped(netdev_get_tx_queue(dev, queue))) {
 			netif_tx_stop_queue(netdev_get_tx_queue(priv->dev,
 								queue));
+
+#ifdef CONFIG_KSZ_SWITCH
+			stop_dev_queues(sw, dev, priv,
+					netdev_get_tx_queue(priv->dev, queue));
+#endif
 			/* This is a hard error, log it. */
 			netdev_err(priv->dev,
 				   "%s: Tx Ring full when queue awake\n",
@@ -5100,6 +6039,13 @@ static int stmmac_rx(struct stmmac_priv
 	int xdp_status = 0;
 	int buf_sz;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct net_device *parent_dev = NULL;
+	struct sk_buff *parent_skb = NULL;
+	struct ksz_sw *sw = priv->port.sw;
+	int ptp_tag = 0;
+#endif
+
 	dma_dir = page_pool_get_dma_dir(rx_q->page_pool);
 	buf_sz = DIV_ROUND_UP(priv->dma_buf_sz, PAGE_SIZE) * PAGE_SIZE;
 
@@ -5322,6 +6268,24 @@ drain_data:
 
 		stmmac_get_rx_hwtstamp(priv, p, np, skb);
 		stmmac_rx_vlan(priv->dev, skb);
+
+#ifdef CONFIG_KSZ_SWITCH
+		if (sw_is_switch(sw)) {
+			struct stmmac_priv *hw_priv;
+
+			/* Initialize variables. */
+			parent_dev = NULL;
+			parent_skb = NULL;
+			ptp_tag = 0;
+			hw_priv = sw_rx_proc(sw, skb, &ptp_tag, &parent_dev,
+				&parent_skb);
+			if (!hw_priv)
+				continue;
+
+			/* Use private structure in network device. */
+			priv = hw_priv;
+		}
+#endif
 		skb->protocol = eth_type_trans(skb, priv->dev);
 
 		if (unlikely(!coe))
@@ -5339,6 +6303,12 @@ drain_data:
 		priv->dev->stats.rx_packets++;
 		priv->dev->stats.rx_bytes += len;
 		count++;
+
+#ifdef CONFIG_KSZ_SWITCH
+		/* Use the real hardware private structure. */
+		if (sw_is_switch(sw))
+			priv = priv->hw_priv;
+#endif
 	}
 
 	if (status & rx_not_ls || skb) {
@@ -5471,6 +6441,36 @@ static void stmmac_set_rx_mode(struct ne
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	int multicast = ((dev->flags & IFF_ALLMULTI) == IFF_ALLMULTI);
+	struct ksz_sw *sw = priv->port.sw;
+
+	if (sw_is_switch(sw)) {
+		bool do_set_filter = false;
+
+		dev_set_promisc(priv,
+			((dev->flags & IFF_PROMISC) == IFF_PROMISC));
+		if (!(dev->flags & IFF_ALLMULTI)) {
+			struct stmmac_priv *hw_priv = priv->hw_priv;
+
+			if (sw->dev_count > 1) {
+				if ((dev->flags & IFF_MULTICAST) &&
+				    !netdev_mc_empty(dev))
+					sw->net_ops->set_multi(sw, dev,
+						&priv->port);
+				multicast |= ((dev->flags & IFF_MULTICAST) ==
+					IFF_MULTICAST) << 1;
+			} else if (!hw_priv->hw_multi &&
+				   !netdev_mc_empty(dev)) {
+				do_set_filter = true;
+			}
+		}
+		dev_set_multicast(priv, multicast);
+		if (!do_set_filter)
+			return;
+	}
+#endif
+
 	stmmac_set_filter(priv, priv->hw, dev);
 }
 
@@ -5524,6 +6524,12 @@ static netdev_features_t stmmac_fix_feat
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (priv != priv->hw_priv)
+		return features;
+#endif
+
 	if (priv->plat->rx_coe == STMMAC_RX_COE_NONE)
 		features &= ~NETIF_F_RXCSUM;
 
@@ -5554,6 +6560,12 @@ static int stmmac_set_features(struct ne
 {
 	struct stmmac_priv *priv = netdev_priv(netdev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (priv != priv->hw_priv)
+		return 0;
+#endif
+
 	/* Keep the COE Type in case of csum is supporting */
 	if (features & NETIF_F_RXCSUM)
 		priv->hw->rx_csum = priv->plat->rx_coe;
@@ -5851,6 +6863,32 @@ static int stmmac_ioctl(struct net_devic
 	struct stmmac_priv *priv = netdev_priv (dev);
 	int ret = -EOPNOTSUPP;
 
+#if defined(CONFIG_KSZ_SWITCH) && defined(CONFIG_1588_PTP)
+	struct ksz_sw *sw = priv->port.sw;
+	struct ptp_info *ptp;
+
+	switch (cmd) {
+	case SIOCSHWTSTAMP:
+		if (sw_is_switch(sw) && (sw->features & PTP_HW)) {
+			int i;
+			int p;
+			u16 ports;
+
+			ports = 0;
+			for (i = 0, p = priv->port.first_port;
+			     i < priv->port.port_cnt; i++, p++)
+				ports |= (1 << p);
+			ptp = &sw->ptp_hw;
+			ret = ptp->ops->hwtstamp_ioctl(ptp, rq, ports);
+		}
+		break;
+	default:
+		break;
+	}
+	if (ret != -EOPNOTSUPP)
+		return ret;
+#endif
+
 	if (!netif_running(dev))
 		return -EINVAL;
 
@@ -5873,6 +6911,47 @@ static int stmmac_ioctl(struct net_devic
 	return ret;
 }
 
+#ifdef CONFIG_KSZ_SWITCH
+static int stmmac_siocdevprivate(struct net_device *dev, struct ifreq *ifr,
+				 void __user *data, int cmd)
+{
+	struct stmmac_priv *priv = netdev_priv (dev);
+	struct ksz_sw *sw = priv->port.sw;
+	int result = -EOPNOTSUPP;
+#ifdef CONFIG_1588_PTP
+	struct ptp_info *ptp;
+#endif
+
+	switch (cmd) {
+#ifdef CONFIG_1588_PTP
+	case SIOCDEVPRIVATE + 15:
+		if (sw_is_switch(sw) && (sw->features & PTP_HW)) {
+			ptp = &sw->ptp_hw;
+			result = ptp->ops->dev_req(ptp, ifr->ifr_data, NULL);
+		}
+		break;
+#endif
+#ifdef CONFIG_KSZ_MRP
+	case SIOCDEVPRIVATE + 14:
+		if (sw_is_switch(sw) && (sw->features & MRP_SUPPORT)) {
+			struct mrp_info *mrp = &sw->mrp;
+
+			result = mrp->ops->dev_req(mrp, ifr->ifr_data);
+		}
+		break;
+#endif
+	case SIOCDEVPRIVATE + 13:
+		if (sw_is_switch(sw)) {
+			result = sw->ops->dev_req(sw, ifr->ifr_data, NULL);
+		}
+		break;
+	default:
+		break;
+	}
+	return result;
+}
+#endif
+
 static int stmmac_setup_tc_block_cb(enum tc_setup_type type, void *type_data,
 				    void *cb_priv)
 {
@@ -5956,6 +7035,35 @@ static int stmmac_set_mac_address(struct
 	if (ret)
 		goto set_mac_error;
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		struct ksz_sw *sw = priv->port.sw;
+		struct stmmac_priv *hw_priv = priv->hw_priv;
+		u8 hw_promisc = hw_priv->hw_promisc;
+		u8 promisc;
+
+		if (!sw_is_switch(sw))
+			break;
+
+		promisc = sw->net_ops->set_mac_addr(sw, ndev, hw_promisc,
+			priv->port.first_port);
+		if (promisc != hw_priv->hw_promisc) {
+
+			/* A hack to accept changed KSZ9897 IBA response. */
+			if (!hw_priv->hw_promisc && 2 == promisc) {
+				promisc = 1;
+				schedule_delayed_work(&hw_priv->promisc_reset,
+						      10);
+			}
+			hw_priv->hw_promisc = promisc;
+
+			/* Turn on/off promiscuous mode. */
+			if (hw_priv->hw_promisc <= 1 && hw_promisc <= 1)
+				hw_set_promisc(hw_priv, hw_priv->hw_promisc);
+		}
+	} while (0);
+#endif
+
 	stmmac_set_umac_addr(priv, priv->hw, ndev->dev_addr, 0);
 
 set_mac_error:
@@ -6255,6 +7363,13 @@ static int stmmac_vlan_rx_add_vid(struct
 	bool is_double = false;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_sw *sw = priv->port.sw;
+
+	if (sw_is_switch(sw))
+		sw->net_ops->add_vid(sw, vid);
+#endif
+
 	if (be16_to_cpu(proto) == ETH_P_8021AD)
 		is_double = true;
 
@@ -6286,6 +7401,15 @@ static int stmmac_vlan_rx_kill_vid(struc
 		return ret;
 	}
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		struct ksz_sw *sw = priv->port.sw;
+
+		if (sw_is_switch(sw))
+			sw->net_ops->kill_vid(sw, vid);
+	} while (0);
+#endif
+
 	if (be16_to_cpu(proto) == ETH_P_8021AD)
 		is_double = true;
 
@@ -6658,6 +7782,9 @@ static const struct net_device_ops stmma
 	.ndo_set_features = stmmac_set_features,
 	.ndo_set_rx_mode = stmmac_set_rx_mode,
 	.ndo_tx_timeout = stmmac_tx_timeout,
+#ifdef CONFIG_KSZ_SWITCH
+	.ndo_siocdevprivate = stmmac_siocdevprivate,
+#endif
 	.ndo_eth_ioctl = stmmac_ioctl,
 	.ndo_setup_tc = stmmac_setup_tc,
 	.ndo_select_queue = stmmac_select_queue,
@@ -7211,6 +8338,19 @@ int stmmac_dvr_probe(struct device *devi
 			goto error_xpcs_setup;
 	}
 
+#ifdef CONFIG_KSZ8795_EMBEDDED
+        ksz8795_init();
+#endif
+#ifdef CONFIG_KSZ8895_EMBEDDED
+        ksz8895_init();
+#endif
+#ifdef CONFIG_KSZ9897_EMBEDDED
+        ksz9897_init();
+#endif
+#ifdef CONFIG_LAN937X_EMBEDDED
+        lan937x_init();
+#endif
+
 	ret = stmmac_phy_setup(priv);
 	if (ret) {
 		netdev_err(ndev, "failed to setup phy (%d)\n", ret);
@@ -7244,6 +8384,17 @@ int stmmac_dvr_probe(struct device *devi
 	 */
 	pm_runtime_put(device);
 
+#ifdef CONFIG_KSZ_SWITCH
+
+	/* Point to real private structure holding hardware information. */
+	priv->hw_priv = priv;
+
+#if !defined(CONFIG_KSZ_IBA_ONLY)
+	if (priv->port.sw)
+		ret = stmmac_sw_init(priv);
+#endif
+#endif
+
 	return ret;
 
 error_serdes_powerup:
@@ -7265,6 +8416,57 @@ error_hw_init:
 }
 EXPORT_SYMBOL_GPL(stmmac_dvr_probe);
 
+#ifdef CONFIG_KSZ_SWITCH
+static void stmmac_sw_remove(struct stmmac_priv *priv)
+{
+	struct ksz_sw *sw = priv->port.sw;
+	bool do_exit = true;
+
+	if (!sw_is_switch(sw))
+		return;
+
+#if defined(CONFIG_KSZ_IBA_ONLY)
+
+	/* Still under initialization in IBA-only mode. */
+	if (2 == sw->info->iba.use_iba) {
+		cancel_delayed_work_sync(&sw->set_ops);
+
+		/* May not started yet. */
+		if (2 == sw->info->iba.use_iba) {
+			kfree(sw->dev);
+			priv->port.sw = NULL;
+			return;
+		}
+		do_exit = false;
+	}
+#endif
+	if (do_exit) {
+		flush_work(&priv->port.link_update);
+		stmmac_sw_exit(priv);
+	}
+#ifdef CONFIG_KSZ_SMI
+	if (priv->sw_pdev)
+		smi_remove(priv->sw_pdev);
+#endif
+	sw->net_ops->leave_dev(sw);
+#if defined(CONFIG_KSZ_IBA_ONLY) && defined(DEBUG_MSG)
+	exit_dbg();
+#endif
+#ifdef CONFIG_KSZ8795_EMBEDDED
+	ksz8795_exit();
+#endif
+#ifdef CONFIG_KSZ8895_EMBEDDED
+	ksz8895_exit();
+#endif
+#ifdef CONFIG_KSZ9897_EMBEDDED
+	ksz9897_exit();
+#endif
+#ifdef CONFIG_LAN937X_EMBEDDED
+	lan937x_exit();
+#endif
+}
+#endif
+
 /**
  * stmmac_dvr_remove
  * @dev: device pointer
@@ -7282,6 +8484,10 @@ int stmmac_dvr_remove(struct device *dev
 	pm_runtime_disable(dev);
 	pm_runtime_put_noidle(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	stmmac_sw_remove(priv);
+#endif
+
 	stmmac_stop_all_dma(priv);
 	stmmac_mac_set(priv, priv->ioaddr, false);
 	netif_carrier_off(ndev);
@@ -7327,6 +8533,12 @@ int stmmac_suspend(struct device *dev)
 	if (!ndev || !netif_running(ndev))
 		return 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (priv != priv->hw_priv)
+		return 0;
+#endif
+
 	mutex_lock(&priv->lock);
 
 	netif_device_detach(ndev);
@@ -7426,6 +8638,12 @@ int stmmac_resume(struct device *dev)
 	if (!netif_running(ndev))
 		return 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (priv != priv->hw_priv)
+		return 0;
+#endif
+
 	/* Power Down bit, into the PM register, is cleared
 	 * automatically as soon as a magic packet or a Wake-up frame
 	 * is received. Anyway, it's better to manually clear
diff -Napur linux-linux4microchip-2022.04-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c linux-linux4microchip-2022.04/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
--- linux-linux4microchip-2022.04-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c	2022-05-06 10:11:03.000000000 -0700
+++ linux-linux4microchip-2022.04/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c	2023-04-28 16:23:01.341800564 -0700
@@ -346,6 +346,21 @@ err_disable_clks:
 	return ret;
 }
 
+#ifdef CONFIG_KSZ_SMI
+/* These SMI access functions may require non-standard MDIO signal and so the
+ * standard phy_read and phy_write functions cannot be used.
+ */
+int stmmac_smi_read(struct mii_bus *bus, int phy_id, int regnum)
+{
+	return stmmac_mdio_read(bus, phy_id, regnum);
+}
+
+int stmmac_smi_write(struct mii_bus *bus, int phy_id, int regnum, u16 val)
+{
+	return stmmac_mdio_write(bus, phy_id, regnum, val);
+}
+#endif
+
 /**
  * stmmac_mdio_reset
  * @bus: points to the mii_bus structure
