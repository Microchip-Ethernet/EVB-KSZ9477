diff -Napur linux-5.10.68-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c linux-5.10.68/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
--- linux-5.10.68-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c	2021-09-22 03:28:07.000000000 -0700
+++ linux-5.10.68/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c	2025-06-30 00:44:37.377281802 -0700
@@ -276,6 +276,12 @@ static int stmmac_ethtool_get_link_ksett
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (priv->hw->pcs & STMMAC_PCS_RGMII ||
 	    priv->hw->pcs & STMMAC_PCS_SGMII) {
 		struct rgmii_adv adv;
@@ -362,6 +368,14 @@ stmmac_ethtool_set_link_ksettings(struct
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (priv->hw->pcs & STMMAC_PCS_RGMII ||
 	    priv->hw->pcs & STMMAC_PCS_SGMII) {
 		u32 mask = ADVERTISED_Autoneg | ADVERTISED_Pause;
@@ -422,6 +436,9 @@ static void stmmac_ethtool_gregs(struct
 	struct stmmac_priv *priv = netdev_priv(dev);
 	u32 *reg_space = (u32 *) space;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	stmmac_dump_mac_regs(priv, priv->hw, reg_space);
 	stmmac_dump_dma_regs(priv, priv->ioaddr, reg_space);
 
@@ -437,6 +454,10 @@ static int stmmac_nway_reset(struct net_
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
 	return phylink_ethtool_nway_reset(priv->phylink);
 }
 
@@ -445,6 +466,9 @@ static void stmmac_get_ringparam(struct
 {
 	struct stmmac_priv *priv = netdev_priv(netdev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	ring->rx_max_pending = DMA_MAX_RX_SIZE;
 	ring->tx_max_pending = DMA_MAX_TX_SIZE;
 	ring->rx_pending = priv->dma_rx_size;
@@ -474,6 +498,11 @@ stmmac_get_pauseparam(struct net_device
 	struct stmmac_priv *priv = netdev_priv(netdev);
 	struct rgmii_adv adv_lp;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (IS_ERR(priv->phylink))
+		return;
+#endif
 	if (priv->hw->pcs && !stmmac_pcs_get_adv_lp(priv, priv->ioaddr, &adv_lp)) {
 		pause->autoneg = 1;
 		if (!adv_lp.pause)
@@ -490,6 +519,14 @@ stmmac_set_pauseparam(struct net_device
 	struct stmmac_priv *priv = netdev_priv(netdev);
 	struct rgmii_adv adv_lp;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (priv->hw->pcs && !stmmac_pcs_get_adv_lp(priv, priv->ioaddr, &adv_lp)) {
 		pause->autoneg = 1;
 		if (!adv_lp.pause)
@@ -509,6 +546,11 @@ static void stmmac_get_ethtool_stats(str
 	unsigned long count;
 	int i, j = 0, ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (IS_ERR(priv->phylink))
+		return;
+#endif
 	if (priv->dma_cap.asp) {
 		for (i = 0; i < STMMAC_SAFETY_FEAT_SIZE; i++) {
 			if (!stmmac_safety_feat_dump(priv, &priv->sstats, i,
@@ -557,6 +599,9 @@ static int stmmac_get_sset_count(struct
 	struct stmmac_priv *priv = netdev_priv(netdev);
 	int i, len, safety_len = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	switch (sset) {
 	case ETH_SS_STATS:
 		len = STMMAC_STATS_LEN;
@@ -588,6 +633,9 @@ static void stmmac_get_strings(struct ne
 	u8 *p = data;
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	switch (stringset) {
 	case ETH_SS_STATS:
 		if (priv->dma_cap.asp) {
@@ -627,6 +675,13 @@ static void stmmac_get_wol(struct net_de
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return;
+	if (IS_ERR(priv->phylink))
+		return;
+#endif
 	if (!priv->plat->pmt)
 		return phylink_ethtool_get_wol(priv->phylink, wol);
 
@@ -648,6 +703,14 @@ static int stmmac_set_wol(struct net_dev
 	if (!device_can_wakeup(priv->device))
 		return -EOPNOTSUPP;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (!priv->plat->pmt) {
 		int ret = phylink_ethtool_set_wol(priv->phylink, wol);
 
@@ -686,6 +749,12 @@ static int stmmac_ethtool_op_get_eee(str
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (!priv->dma_cap.eee)
 		return -EOPNOTSUPP;
 
@@ -703,6 +772,14 @@ static int stmmac_ethtool_op_set_eee(str
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (!priv->dma_cap.eee)
 		return -EOPNOTSUPP;
 
@@ -757,6 +834,9 @@ static int stmmac_get_coalesce(struct ne
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	ec->tx_coalesce_usecs = priv->tx_coal_timer;
 	ec->tx_max_coalesced_frames = priv->tx_coal_frames;
 
@@ -775,6 +855,12 @@ static int stmmac_set_coalesce(struct ne
 	u32 rx_cnt = priv->plat->rx_queues_to_use;
 	unsigned int rx_riwt;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	if (priv->use_riwt && (ec->rx_coalesce_usecs > 0)) {
 		rx_riwt = stmmac_usec2riwt(ec->rx_coalesce_usecs, priv);
 
@@ -820,6 +906,9 @@ static u32 stmmac_get_rxfh_key_size(stru
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	return sizeof(priv->rss.key);
 }
 
@@ -827,6 +916,9 @@ static u32 stmmac_get_rxfh_indir_size(st
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	return ARRAY_SIZE(priv->rss.table);
 }
 
@@ -836,6 +928,9 @@ static int stmmac_get_rxfh(struct net_de
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int i;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	if (indir) {
 		for (i = 0; i < ARRAY_SIZE(priv->rss.table); i++)
 			indir[i] = priv->rss.table[i];
@@ -855,6 +950,12 @@ static int stmmac_set_rxfh(struct net_de
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int i;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	if ((hfunc != ETH_RSS_HASH_NO_CHANGE) && (hfunc != ETH_RSS_HASH_TOP))
 		return -EOPNOTSUPP;
 
@@ -875,6 +976,9 @@ static void stmmac_get_channels(struct n
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	chan->rx_count = priv->plat->rx_queues_to_use;
 	chan->tx_count = priv->plat->tx_queues_to_use;
 	chan->max_rx = priv->dma_cap.number_rx_queues;
@@ -886,6 +990,12 @@ static int stmmac_set_channels(struct ne
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	if (chan->rx_count > priv->dma_cap.number_rx_queues ||
 	    chan->tx_count > priv->dma_cap.number_tx_queues ||
 	    !chan->rx_count || !chan->tx_count)
@@ -899,6 +1009,9 @@ static int stmmac_get_ts_info(struct net
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	if ((priv->dma_cap.time_stamp || priv->dma_cap.atime_stamp)) {
 
 		info->so_timestamping = SOF_TIMESTAMPING_TX_SOFTWARE |
@@ -935,6 +1048,9 @@ static int stmmac_get_tunable(struct net
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	switch (tuna->id) {
 	case ETHTOOL_RX_COPYBREAK:
 		*(u32 *)data = priv->rx_copybreak;
@@ -954,6 +1070,12 @@ static int stmmac_set_tunable(struct net
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	switch (tuna->id) {
 	case ETHTOOL_RX_COPYBREAK:
 		priv->rx_copybreak = *(u32 *)data;
diff -Napur linux-5.10.68-orig/drivers/net/ethernet/stmicro/stmmac/stmmac.h linux-5.10.68/drivers/net/ethernet/stmicro/stmmac/stmmac.h
--- linux-5.10.68-orig/drivers/net/ethernet/stmicro/stmmac/stmmac.h	2021-09-22 03:28:07.000000000 -0700
+++ linux-5.10.68/drivers/net/ethernet/stmicro/stmmac/stmmac.h	2025-06-29 15:21:27.032542497 -0700
@@ -23,6 +23,16 @@
 #include <linux/reset.h>
 #include <net/page_pool.h>
 
+#if defined(CONFIG_LAN937X_SWITCH)
+#ifndef CONFIG_KSZ_SWITCH
+#define CONFIG_KSZ_SWITCH
+#endif
+#endif
+
+#ifdef CONFIG_KSZ_SWITCH
+#include "../../micrel/ksz_mac.h"
+#endif
+
 struct stmmac_resources {
 	void __iomem *addr;
 	const char *mac;
@@ -244,8 +254,40 @@ struct stmmac_priv {
 
 	/* Receive Side Scaling */
 	struct stmmac_rss rss;
+
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac sw_mac;
+#endif
 };
 
+#ifdef CONFIG_KSZ_SWITCH
+static inline struct ksz_mac *get_ksz_mac(void *ptr)
+{
+	struct stmmac_priv *dev = ptr;
+
+	return &dev->sw_mac;
+}
+
+static inline bool is_virt_dev(struct stmmac_priv *dev)
+{
+	struct ksz_mac *priv = get_ksz_mac(dev);
+
+	if (priv->hw_priv && priv != priv->hw_priv)
+		return true;
+	return false;
+}
+
+static inline struct ksz_sw *get_sw(struct stmmac_priv *dev)
+{
+	return dev->sw_mac.port.sw;
+}
+
+static inline struct stmmac_priv *get_hw_dev(struct stmmac_priv *dev)
+{
+	return dev->sw_mac.hw_priv->dev;
+}
+#endif
+
 enum stmmac_state {
 	STMMAC_DOWN,
 	STMMAC_RESET_REQUESTED,
diff -Napur linux-5.10.68-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c linux-5.10.68/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
--- linux-5.10.68-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c	2021-09-22 03:28:07.000000000 -0700
+++ linux-5.10.68/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c	2025-09-22 17:56:46.218671797 -0700
@@ -39,6 +39,10 @@
 #include <linux/udp.h>
 #include <net/pkt_cls.h>
 #include "stmmac_ptp.h"
+
+#ifdef CONFIG_KSZ_SWITCH
+#include "../../micrel/ksz_mac_pre.c"
+#endif
 #include "stmmac.h"
 #include <linux/reset.h>
 #include <linux/of_mdio.h>
@@ -113,6 +117,46 @@ static void stmmac_exit_fs(struct net_de
 
 #define STMMAC_COAL_TIMER(x) (jiffies + usecs_to_jiffies(x))
 
+#ifdef CONFIG_KSZ_SWITCH
+static struct ksz_mac *get_netdev_priv(struct net_device *net)
+{
+	return get_ksz_mac(netdev_priv(net));
+}
+
+static void sw_reset_mac_mib(struct ksz_mac *priv)
+{
+}
+
+static void setup_ksz_mac(struct stmmac_priv *dev, struct net_device *net)
+{
+	dev->sw_mac.dev = dev;
+	dev->sw_mac.net = net;
+	dev->sw_mac.hw_priv = &dev->sw_mac;
+}
+
+#ifndef CONFIG_KSZ_SWITCH_EMBEDDED
+#define USE_SPEED_LINK
+#define USE_MIB
+#endif
+
+#define KSZ_USE_IOCTL
+#define KSZ_USE_PRIVATE_IOCTL
+#define KSZ_USE_PHYLINK
+#define KSZ_USE_SPI_DEV
+#define KSZ_USE_TX_QUEUE
+#define KSZ_USE_CLOSE_HW
+#define KSZ_USE_COMPLETED_QUEUE
+#include "../../micrel/ksz_mac.c"
+
+static void hw_set_multicast(void *hw_priv, int multicast)
+{
+}  /* hw_set_multicast */
+
+static void hw_set_promisc(void *hw_priv, int promisc)
+{
+}  /* hw_set_promisc */
+#endif
+
 /**
  * stmmac_verify_args - verify the driver parameters.
  * Description: it checks the driver parameters and set a default in case of
@@ -903,6 +947,26 @@ static void stmmac_mac_link_down(struct
 {
 	struct stmmac_priv *priv = netdev_priv(to_net_dev(config->dev));
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		struct ksz_mac *sw_mac;
+
+		priv = get_hw_dev(priv);
+		sw_mac = get_ksz_mac(priv);
+		if (sw_is_switch(sw_mac->port.sw)) {
+
+#ifdef CONFIG_KSZ_IBA_ONLY
+			/* Cannot turn off queue while IBA is being used. */
+			if (sw_mac->port.need_mac)
+				return;
+#endif
+			if (interface == PHY_INTERFACE_MODE_INTERNAL) {
+				return;
+			}
+		}
+		sw_mac->port.ready = false;
+	} while (0);
+#endif
 	stmmac_mac_set(priv, priv->ioaddr, false);
 	priv->eee_active = false;
 	priv->tx_lpi_enabled = false;
@@ -919,6 +983,22 @@ static void stmmac_mac_link_up(struct ph
 	struct stmmac_priv *priv = netdev_priv(to_net_dev(config->dev));
 	u32 ctrl;
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		struct ksz_mac *sw_mac;
+
+		priv = get_hw_dev(priv);
+		sw_mac = get_ksz_mac(priv);
+		if (sw_is_switch(sw_mac->port.sw)) {
+			if (interface == PHY_INTERFACE_MODE_INTERNAL) {
+				return;
+			}
+		}
+
+		/* MAC is ready to send after function ends. */
+		sw_mac->port.ready = true;
+	} while (0);
+#endif
 	stmmac_xpcs_link_up(priv, &priv->hw->xpcs_args, speed, interface);
 
 	ctrl = readl(priv->ioaddr + MAC_CTRL_REG);
@@ -1056,6 +1136,27 @@ static int stmmac_init_phy(struct net_de
 	struct device_node *node;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (priv->phylink) {
+		struct ksz_mac *sw_mac = get_ksz_mac(priv);
+		struct ksz_sw *sw = sw_mac->port.sw;
+
+		if (sw_is_switch(sw)) {
+			struct phy_device *phydev;
+
+#ifdef CONFIG_KSZ_IBA_ONLY
+			if (sw_mac->hw_priv->dev == priv)
+				return 0;
+#endif
+			phydev = sw_mac->port.phydev;
+			ret = phylink_connect_phy(priv->phylink, phydev);
+			if (!ret) {
+				sw_mac->phylink = priv->phylink;
+			}
+			return ret;
+		}
+	}
+#endif
 	node = priv->plat->phylink_node;
 
 	if (node)
@@ -1087,6 +1188,12 @@ static int stmmac_init_phy(struct net_de
 	return ret;
 }
 
+#ifdef CONFIG_KSZ_SMI
+/* Defined in stmmac_mdio.c. */
+int stmmac_smi_read(struct mii_bus *bus, int phy_id, int regnum);
+int stmmac_smi_write(struct mii_bus *bus, int phy_id, int regnum, u16 val);
+#endif
+
 static int stmmac_phy_setup(struct stmmac_priv *priv)
 {
 	struct fwnode_handle *fwnode = of_fwnode_handle(priv->plat->phylink_node);
@@ -1100,6 +1207,27 @@ static int stmmac_phy_setup(struct stmma
 	if (!fwnode)
 		fwnode = dev_fwnode(priv->device);
 
+#if defined(CONFIG_KSZ_SWITCH) && !defined(CONFIG_KSZ_IBA_ONLY)
+	/* It is expected a PHY is declared if a switch is not used. */
+	if (of_phy_is_fixed_link(priv->device->of_node)) {
+		struct ksz_mac *sw_mac = get_ksz_mac(priv);
+		int err = 0;
+
+#ifdef CONFIG_KSZ_SMI
+		int irq = get_sw_irq(NULL);
+
+		err = smi_probe(sw_mac->sw_pdev, priv->mii, irq,
+				stmmac_smi_read, stmmac_smi_write);
+#endif
+		if (!err)
+			err = sw_mac_chk(sw_mac);
+
+		/* Switch driver defines its own phylink. */
+		if (!err)
+			return 0;
+	}
+#endif
+
 	phylink = phylink_create(&priv->phylink_config, fwnode,
 				 mode, &stmmac_phylink_mac_ops);
 	if (IS_ERR(phylink))
@@ -1984,6 +2112,12 @@ static int stmmac_tx_clean(struct stmmac
 	unsigned int bytes_compl = 0, pkts_compl = 0;
 	unsigned int entry, count = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac *hw_priv = get_ksz_mac(priv);
+
+	sw_init_queue_len(hw_priv);
+#endif
+
 	__netif_tx_lock_bh(netdev_get_tx_queue(priv->dev, queue));
 
 	priv->xstats.tx_clean++;
@@ -2050,6 +2184,10 @@ static int stmmac_tx_clean(struct stmmac
 		if (likely(skb != NULL)) {
 			pkts_compl++;
 			bytes_compl += skb->len;
+
+#ifdef CONFIG_KSZ_SWITCH
+			sw_update_queue_len(hw_priv, skb);
+#endif
 			dev_consume_skb_any(skb);
 			tx_q->tx_skbuff[entry] = NULL;
 		}
@@ -2060,6 +2198,9 @@ static int stmmac_tx_clean(struct stmmac
 	}
 	tx_q->dirty_tx = entry;
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (!sw_completed_queue(hw_priv, queue))
+#endif
 	netdev_tx_completed_queue(netdev_get_tx_queue(priv->dev, queue),
 				  pkts_compl, bytes_compl);
 
@@ -2070,6 +2211,11 @@ static int stmmac_tx_clean(struct stmmac
 		netif_dbg(priv, tx_done, priv->dev,
 			  "%s: restart transmit\n", __func__);
 		netif_tx_wake_queue(netdev_get_tx_queue(priv->dev, queue));
+
+#ifdef CONFIG_KSZ_SWITCH
+		wake_dev_queues(get_sw(priv), priv->dev,
+				netdev_get_tx_queue(priv->dev, queue));
+#endif
 	}
 
 	if ((priv->eee_enabled) && (!priv->tx_path_in_lpi_mode)) {
@@ -2112,6 +2258,11 @@ static void stmmac_tx_err(struct stmmac_
 
 	priv->dev->stats.tx_errors++;
 	netif_tx_wake_queue(netdev_get_tx_queue(priv->dev, chan));
+
+#ifdef CONFIG_KSZ_SWITCH
+	wake_dev_queues(get_sw(priv), priv->dev,
+			netdev_get_tx_queue(priv->dev, chan));
+#endif
 }
 
 /**
@@ -2628,6 +2779,137 @@ static void stmmac_safety_feat_configura
 	}
 }
 
+#ifdef CONFIG_KSZ_SWITCH
+static int sw_mac_init(struct net_device *dev, struct ksz_mac *sw_mac)
+{
+	struct ksz_sw *sw;
+	int err;
+	int i;
+	int port_count;
+	int dev_count;
+	int mib_port_count;
+	char dev_label[IFNAMSIZ];
+	struct stmmac_priv *priv, *hw_dev;
+	struct ksz_mac *hw_priv;
+	struct net_device *main_dev;
+	struct device *device;
+	netdev_features_t features;
+	u32 rx_queues, tx_queues;
+
+	priv = sw_mac->dev;
+	hw_dev = sw_mac->dev;
+	sw = sw_mac->port.sw;
+
+	/* This is the main private structure holding hardware information. */
+	hw_priv = sw_mac;
+	hw_priv->parent = sw->dev;
+	main_dev = priv->dev;
+	device = priv->device;
+	features = main_dev->features;
+
+	prep_sw_first(sw, &port_count, &mib_port_count, &dev_count, dev_label,
+		      &stmmac_phylink_mac_ops);
+	sw_update_csum(sw);
+
+	/* The main switch phydev will not be attached. */
+	if (dev_count > 1) {
+		struct phy_device *phydev = sw->phy[0];
+
+		phydev->interface = priv->plat->phy_interface;
+	}
+
+	/* Save the base device name. */
+	strlcpy(dev_label, hw_priv->net->name, IFNAMSIZ);
+
+#ifndef CONFIG_KSZ_SMI
+	/* For access to PHY using MDIO bus from MAC. */
+	if (sw->net_ops->setup_mdiobus)
+		sw->net_ops->setup_mdiobus(sw, priv->mii);
+#endif
+	prep_sw_dev(sw, sw_mac, 0, port_count, mib_port_count, dev_label,
+		    priv->plat->phy_interface);
+
+	/* Use the phylink created by the switch driver. */
+	if (!priv->phylink)
+		priv->phylink = sw_mac->port.pl;
+
+	INIT_DELAYED_WORK(&hw_priv->promisc_reset, promisc_reset_work);
+
+#ifdef CONFIG_KSZ_IBA_ONLY
+	INIT_WORK(&hw_priv->rmv_dev, rmv_dev_work);
+#endif
+
+	rx_queues = hw_dev->plat->rx_queues_to_use;
+	tx_queues = hw_dev->plat->tx_queues_to_use;
+	for (i = 1; i < dev_count; i++) {
+		dev = devm_alloc_etherdev_mqs(device,
+					      sizeof(struct stmmac_priv),
+					      tx_queues, rx_queues);
+		if (!dev)
+			break;
+
+		priv = netdev_priv(dev);
+		priv->dev = dev;
+		priv->device = device;
+		priv->plat = hw_dev->plat;
+		priv->hw = hw_dev->hw;
+
+		sw_mac = &priv->sw_mac;
+		sw_mac->hw_priv = hw_priv;
+		sw_mac->dev = priv;
+		sw_mac->net = dev;
+
+		mutex_init(&priv->lock);
+
+		dev->netdev_ops = main_dev->netdev_ops;
+		dev->ethtool_ops = main_dev->ethtool_ops;
+
+		dev->base_addr = main_dev->base_addr;
+		memcpy(dev->dev_addr, main_dev->dev_addr, ETH_ALEN);
+
+		dev->hard_header_len = main_dev->hard_header_len;
+		dev->hw_features = main_dev->hw_features;
+		dev->features = features;
+
+		SET_NETDEV_DEV(dev, device);
+
+		prep_sw_dev(sw, sw_mac, i, port_count, mib_port_count,
+			    dev_label, priv->plat->phy_interface);
+		priv->phylink = sw_mac->port.pl;
+
+		err = register_netdev(dev);
+		if (err) {
+			free_netdev(dev);
+			break;
+		}
+
+		netif_carrier_off(dev);
+	}
+
+#if !defined(CONFIG_KSZ_IBA_ONLY)
+	/*
+	 * Adding sysfs support is optional for network device.  It is more
+	 * convenient to locate eth0 more or less than spi<bus>.<select>,
+	 * especially when the bus number is auto assigned which results in a
+	 * very big number.
+	 */
+	err = init_sw_sysfs(sw, &hw_priv->sysfs, &main_dev->dev);
+
+#ifdef CONFIG_1588_PTP
+	if (sw->features & PTP_HW)
+		err = init_ptp_sysfs(&hw_priv->ptp_sysfs, &main_dev->dev);
+#endif
+#ifdef CONFIG_KSZ_DLR
+	if (sw->features & DLR_HW)
+		err = init_dlr_sysfs(&main_dev->dev);
+#endif
+	sw_device_seen++;
+#endif
+
+	return 0;
+}
+#endif
+
 /**
  * stmmac_hw_setup - setup mac in a usable state.
  *  @dev : pointer to the device structure.
@@ -2649,6 +2931,14 @@ static int stmmac_hw_setup(struct net_de
 	u32 chan;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_sw *sw = get_sw(priv);
+
+	priv = get_hw_dev(priv);
+	if (sw_is_switch(sw) && (sw->features & PTP_HW))
+		init_ptp = false;
+#endif
+
 	/* DMA initialization and SW reset */
 	ret = stmmac_init_dma_engine(priv);
 	if (ret < 0) {
@@ -2792,6 +3082,16 @@ static int stmmac_open(struct net_device
 	u32 chan;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac *sw_mac = &priv->sw_mac;
+	struct ksz_mac *hw_priv = sw_mac->hw_priv;
+	struct stmmac_priv *hw_dev = get_hw_dev(priv);
+	struct stmmac_priv *orig_priv = priv;
+	struct ksz_sw *sw = sw_mac->port.sw;
+	struct net_device *orig_dev = dev;
+	int rx_mode = 0;
+#endif
+
 	if (priv->hw->pcs != STMMAC_PCS_TBI &&
 	    priv->hw->pcs != STMMAC_PCS_RTBI &&
 	    priv->hw->xpcs == NULL) {
@@ -2804,6 +3104,17 @@ static int stmmac_open(struct net_device
 		}
 	}
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (!hw_priv->do_hw && sw_mac_open_first(dev, sw_mac, &rx_mode)) {
+		sw_mac->skip_hw = 1;
+		goto skip_hw;
+	}
+
+	/* Make sure only real hardware is operated. */
+	priv = hw_dev;
+	dev = priv->dev;
+#endif
+
 	/* Extra statistics */
 	memset(&priv->xstats, 0, sizeof(struct stmmac_extra_stats));
 	priv->xstats.threshold = tc;
@@ -2815,6 +3126,11 @@ static int stmmac_open(struct net_device
 	if (bfsize < BUF_SIZE_16KiB)
 		bfsize = stmmac_set_bfsize(dev->mtu, priv->dma_buf_sz);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (sw_is_switch(sw)) {
+		bfsize += sw->net_ops->get_mtu(sw);
+	}
+#endif
 	priv->dma_buf_sz = bfsize;
 	buf_sz = bfsize;
 
@@ -2856,10 +3172,29 @@ static int stmmac_open(struct net_device
 
 	stmmac_init_coalesce(priv);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = orig_priv;
+#endif
 	phylink_start(priv->phylink);
 	/* We may have called phylink_speed_down before */
 	phylink_speed_up(priv->phylink);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (sw_is_switch(sw)) {
+		struct phy_device *phydev;
+
+		phydev = sw_mac->port.phydev;
+
+		/* Do not want polling done. */
+#ifdef CONFIG_MACB_MODULE
+		cancel_delayed_work_sync(&phydev->state_queue);
+#else
+		phy_stop_machine(phydev);
+#endif
+	}
+	priv = hw_dev;
+#endif
+
 	/* Request the IRQ lines */
 	ret = request_irq(dev->irq, stmmac_interrupt,
 			  IRQF_SHARED, dev->name, dev);
@@ -2895,8 +3230,40 @@ static int stmmac_open(struct net_device
 	}
 
 	stmmac_enable_all_queues(priv);
+
+#ifdef CONFIG_KSZ_SWITCH
+skip_hw:
+	priv = orig_priv;
+	if (sw_is_switch(sw) && !hw_priv->do_hw) {
+		/* Need to start PHY before opening the port. */
+		if (sw_mac->skip_hw) {
+			struct phy_device *phydev;
+
+			phydev = sw_mac->port.phydev;
+
+			phylink_start(priv->phylink);
+			phylink_speed_up(priv->phylink);
+			/* Do not want polling done. */
+#ifdef CONFIG_MACB_MODULE
+			cancel_delayed_work_sync(&phydev->state_queue);
+#else
+			phy_stop_machine(phydev);
+#endif
+		}
+		sw_mac->skip_hw = 0;
+		dev = orig_dev;
+		sw_mac_open_next(sw, sw_mac->hw_priv, rx_mode);
+		sw_mac_open_final(sw, dev, hw_priv, sw_mac);
+	}
+#endif
+
 	netif_tx_start_all_queues(priv->dev);
 
+#if defined(CONFIG_KSZ_IBA_ONLY)
+	if (!sw_is_switch(sw))
+		create_sw_dev(dev, priv);
+#endif
+
 	return 0;
 
 lpiirq_error:
@@ -2905,7 +3272,11 @@ lpiirq_error:
 wolirq_error:
 	free_irq(dev->irq, dev);
 irq_error:
+#ifdef CONFIG_KSZ_SWITCH
+	phylink_stop(orig_priv->phylink);
+#else
 	phylink_stop(priv->phylink);
+#endif
 
 	for (chan = 0; chan < priv->plat->tx_queues_to_use; chan++)
 		del_timer_sync(&priv->tx_queue[chan].txtimer);
@@ -2914,6 +3285,9 @@ irq_error:
 init_error:
 	free_dma_desc_resources(priv);
 dma_desc_error:
+#ifdef CONFIG_KSZ_SWITCH
+	priv = orig_priv;
+#endif
 	phylink_disconnect_phy(priv->phylink);
 	return ret;
 }
@@ -2929,17 +3303,56 @@ static int stmmac_release(struct net_dev
 	struct stmmac_priv *priv = netdev_priv(dev);
 	u32 chan;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac *sw_mac = get_ksz_mac(priv);
+	struct ksz_mac *hw_priv = sw_mac->hw_priv;
+	struct net_device *orig_dev = dev;
+	struct ksz_sw *sw = get_sw(priv);
+	int iba = 0;
+#endif
+
 	if (device_may_wakeup(priv->device))
 		phylink_speed_down(priv->phylink, false);
 	/* Stop and disconnect the PHY */
 	phylink_stop(priv->phylink);
 	phylink_disconnect_phy(priv->phylink);
 
+#ifdef CONFIG_KSZ_SWITCH
+#ifdef CONFIG_KSZ_IBA
+	iba = IBA_USE_CODE_SOFT_RESET;
+#endif
+	if (!hw_priv->do_hw && sw_mac_close(dev, sw_mac, iba)) {
+		bool stop_queue = true;
+
+		/* Do not shut off queue for main device. */
+#ifdef CONFIG_KSZ_IBA_ONLY
+		do {
+			struct ksz_sw *sw = get_sw(priv);
+
+			if (hw_priv->port.need_mac &&
+			    dev == sw->main_dev)
+				stop_queue = false;
+		} while (0);
+#endif
+		priv->sw_mac.phylink = NULL;
+		if (stop_queue)
+			netif_tx_disable(dev);
+		return 0;
+	}
+
+	/* Make sure only real hardware is operated. */
+	priv = get_hw_dev(priv);
+#endif
+
 	stmmac_disable_all_queues(priv);
 
 	for (chan = 0; chan < priv->plat->tx_queues_to_use; chan++)
 		del_timer_sync(&priv->tx_queue[chan].txtimer);
 
+#ifdef CONFIG_KSZ_SWITCH
+	dev = priv->dev;
+#endif
+
 	/* Free the IRQ lines */
 	free_irq(dev->irq, dev);
 	if (priv->wol_irq != dev->irq)
@@ -2961,8 +3374,14 @@ static int stmmac_release(struct net_dev
 	/* Disable the MAC Rx/Tx */
 	stmmac_mac_set(priv, priv->ioaddr, false);
 
+#ifdef CONFIG_KSZ_SWITCH
+	dev = orig_dev;
+#endif
 	netif_carrier_off(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (!sw_is_switch(sw) || !(sw->features & PTP_HW))
+#endif
 	stmmac_release_ptp(priv);
 
 	return 0;
@@ -3339,12 +3758,36 @@ static netdev_tx_t stmmac_xmit(struct sk
 	bool has_vlan, set_ic;
 	dma_addr_t des;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac *sw_mac = get_ksz_mac(priv);
+	struct ksz_sw *sw = get_sw(priv);
+
+	/* May be called from switch driver. */
+	if (netif_tx_queue_stopped(netdev_get_tx_queue(dev, queue)))
+		return NETDEV_TX_BUSY;
+
+	skb = sw_mac_tx_pre(skb, sw_mac, 2);
+	if (sw_mac != sw_mac->hw_priv) {
+		priv = sw_mac->hw_priv->dev;
+	}
+#endif
+
 	tx_q = &priv->tx_queue[queue];
 	first_tx = tx_q->cur_tx;
 
 	if (priv->tx_path_in_lpi_mode)
 		stmmac_disable_eee_mode(priv);
 
+#ifdef CONFIG_KSZ_SWITCH
+	skb = sw_mac_tx(dev, skb, sw_mac);
+	if (!skb) {
+		return NETDEV_TX_OK;
+	}
+	nopaged_len = skb_headlen(skb);
+	nfrags = skb_shinfo(skb)->nr_frags;
+	gso = skb_shinfo(skb)->gso_type;
+#endif
+
 	/* Manage oversized TCP frames for GMAC4 device */
 	if (skb_is_gso(skb) && priv->tso) {
 		if (gso & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6))
@@ -3357,6 +3800,11 @@ static netdev_tx_t stmmac_xmit(struct sk
 		if (!netif_tx_queue_stopped(netdev_get_tx_queue(dev, queue))) {
 			netif_tx_stop_queue(netdev_get_tx_queue(priv->dev,
 								queue));
+
+#ifdef CONFIG_KSZ_SWITCH
+			stop_dev_queues(sw, dev,
+					netdev_get_tx_queue(priv->dev, queue));
+#endif
 			/* This is a hard error, log it. */
 			netdev_err(priv->dev,
 				   "%s: Tx Ring full when queue awake\n",
@@ -3543,6 +3991,9 @@ static netdev_tx_t stmmac_xmit(struct sk
 	 */
 	wmb();
 
+#ifdef CONFIG_KSZ_IBA
+	if (skb->protocol != htons(IBA_TAG_TYPE))
+#endif
 	netdev_tx_sent_queue(netdev_get_tx_queue(dev, queue), skb->len);
 
 	stmmac_enable_dma_transmission(priv, priv->ioaddr);
@@ -3733,6 +4184,11 @@ static int stmmac_rx(struct stmmac_priv
 	unsigned int desc_size;
 	struct sk_buff *skb = NULL;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct stmmac_priv *hw_dev = priv;
+	struct ksz_sw *sw = get_sw(priv);
+#endif
+
 	if (netif_msg_rx_status(priv)) {
 		void *rx_head;
 
@@ -3899,6 +4355,25 @@ drain_data:
 
 		stmmac_get_rx_hwtstamp(priv, p, np, skb);
 		stmmac_rx_vlan(priv->dev, skb);
+
+#ifdef CONFIG_KSZ_SWITCH
+		if (sw_is_switch(sw)) {
+			struct stmmac_priv *hw_priv;
+			int rxlen = 0;
+
+			hw_priv = sw_rx_proc(sw, skb, &rxlen);
+			if (!hw_priv) {
+				if (rxlen) {
+					priv->dev->stats.rx_packets++;
+					priv->dev->stats.rx_bytes += rxlen;
+				}
+				continue;
+			}
+
+			/* Use private structure in network device. */
+			priv = hw_priv;
+		}
+#endif
 		skb->protocol = eth_type_trans(skb, priv->dev);
 
 		if (unlikely(!coe))
@@ -3916,6 +4391,11 @@ drain_data:
 		priv->dev->stats.rx_packets++;
 		priv->dev->stats.rx_bytes += len;
 		count++;
+
+#ifdef CONFIG_KSZ_SWITCH
+		/* Use the real hardware private structure. */
+		priv = hw_dev;
+#endif
 	}
 
 	if (status & rx_not_ls || skb) {
@@ -4007,6 +4487,25 @@ static void stmmac_set_rx_mode(struct ne
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (sw_set_rx_mode(dev)) {
+		struct ksz_mac *hw_priv = get_ksz_mac(priv);
+
+		dev = hw_priv->net;
+		if (hw_priv->hw_promisc)
+			dev->flags |= IFF_PROMISC;
+		else
+			dev->flags &= ~IFF_PROMISC;
+		if (hw_priv->hw_multi)
+			dev->flags |= IFF_ALLMULTI;
+		else
+			dev->flags &= ~IFF_ALLMULTI;
+		stmmac_set_filter(priv, priv->hw, dev);
+		return;
+	}
+#endif
+
 	stmmac_set_filter(priv, priv->hw, dev);
 }
 
@@ -4027,6 +4526,15 @@ static int stmmac_change_mtu(struct net_
 	int txfifosz = priv->plat->tx_fifo_size;
 	const int mtu = new_mtu;
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (is_virt_mac(get_ksz_mac(priv))) {
+		new_mtu = STMMAC_ALIGN(new_mtu);
+		dev->mtu = mtu;
+		netdev_update_features(dev);
+		return 0;
+	}
+#endif
+
 	if (txfifosz == 0)
 		txfifosz = priv->dma_cap.tx_fifo_size;
 
@@ -4055,6 +4563,12 @@ static netdev_features_t stmmac_fix_feat
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return features;
+#endif
+
 	if (priv->plat->rx_coe == STMMAC_RX_COE_NONE)
 		features &= ~NETIF_F_RXCSUM;
 
@@ -4087,6 +4601,12 @@ static int stmmac_set_features(struct ne
 	bool sph_en;
 	u32 chan;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	/* Keep the COE Type in case of csum is supporting */
 	if (features & NETIF_F_RXCSUM)
 		priv->hw->rx_csum = priv->plat->rx_coe;
@@ -4196,6 +4716,14 @@ static int stmmac_ioctl(struct net_devic
 	struct stmmac_priv *priv = netdev_priv (dev);
 	int ret = -EOPNOTSUPP;
 
+#ifdef CONFIG_KSZ_SWITCH
+	int result;
+
+	result = sw_ioctl(dev, rq, cmd);
+	if (result != -EOPNOTSUPP)
+		return result;
+#endif
+
 	if (!netif_running(dev))
 		return -EINVAL;
 
@@ -4295,6 +4823,13 @@ static int stmmac_set_mac_address(struct
 	if (ret)
 		return ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		if (sw_mac_set_addr(ndev, &priv->sw_mac))
+			return ret;
+	} while (0);
+#endif
+
 	stmmac_set_umac_addr(priv, priv->hw, ndev->dev_addr, 0);
 
 	return ret;
@@ -4591,6 +5126,19 @@ static int stmmac_vlan_rx_add_vid(struct
 	bool is_double = false;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_sw *sw = get_sw(priv);
+
+	if (sw_is_switch(sw)) {
+		if (!is_virt_dev(priv)) {
+			sw->net_ops->add_vid(sw, vid);
+		} else {
+			priv = get_hw_dev(priv);
+			ndev = priv->dev;
+		}
+	}
+#endif
+
 	if (be16_to_cpu(proto) == ETH_P_8021AD)
 		is_double = true;
 
@@ -4616,6 +5164,21 @@ static int stmmac_vlan_rx_kill_vid(struc
 	bool is_double = false;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		struct ksz_sw *sw = get_sw(priv);
+
+		if (sw_is_switch(sw)) {
+			if (!is_virt_dev(priv)) {
+				sw->net_ops->kill_vid(sw, vid);
+			} else {
+				priv = get_hw_dev(priv);
+				ndev = priv->dev;
+			}
+		}
+	} while (0);
+#endif
+
 	if (be16_to_cpu(proto) == ETH_P_8021AD)
 		is_double = true;
 
@@ -4831,19 +5394,40 @@ int stmmac_reinit_queues(struct net_devi
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct net_device *orig_dev = dev;
+	struct net_device *hw_dev = dev;
+
+	sw_mac_close_for_hw(get_ksz_mac(priv), &dev);
+	orig_dev = dev;
+#endif
+
 	if (netif_running(dev))
 		stmmac_release(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	dev = hw_dev;
+#endif
 	stmmac_napi_del(dev);
 
 	priv->plat->rx_queues_to_use = rx_cnt;
 	priv->plat->tx_queues_to_use = tx_cnt;
 
 	stmmac_napi_add(dev);
+#ifdef CONFIG_KSZ_SWITCH
+	dev = orig_dev;
+#endif
 
 	if (netif_running(dev))
 		ret = stmmac_open(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (netif_running(dev)) {
+		priv = netdev_priv(dev);
+		sw_mac_open_for_hw(get_ksz_mac(priv), dev);
+	}
+#endif
+
 	return ret;
 }
 
@@ -4852,6 +5436,10 @@ int stmmac_reinit_ringparam(struct net_d
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	sw_mac_close_for_hw(get_ksz_mac(priv), &dev);
+	priv = get_hw_dev(priv);
+#endif
 	if (netif_running(dev))
 		stmmac_release(dev);
 
@@ -4861,6 +5449,13 @@ int stmmac_reinit_ringparam(struct net_d
 	if (netif_running(dev))
 		ret = stmmac_open(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (netif_running(dev)) {
+		priv = netdev_priv(dev);
+		sw_mac_open_for_hw(get_ksz_mac(priv), dev);
+	}
+#endif
+
 	return ret;
 }
 
@@ -4882,9 +5477,11 @@ int stmmac_dvr_probe(struct device *devi
 	struct stmmac_priv *priv;
 	u32 rxq;
 	int i, ret = 0;
+	u32 rx_queues = plat_dat->rx_queues_to_use;
+	u32 tx_queues = plat_dat->tx_queues_to_use;
 
 	ndev = devm_alloc_etherdev_mqs(device, sizeof(struct stmmac_priv),
-				       MTL_MAX_TX_QUEUES, MTL_MAX_RX_QUEUES);
+				       tx_queues, rx_queues);
 	if (!ndev)
 		return -ENOMEM;
 
@@ -4954,6 +5551,7 @@ int stmmac_dvr_probe(struct device *devi
 		ndev->hw_features |= NETIF_F_HW_TC;
 	}
 
+#ifndef CONFIG_KSZ_SWITCH
 	if ((priv->plat->tso_en) && (priv->dma_cap.tsoen)) {
 		ndev->hw_features |= NETIF_F_TSO | NETIF_F_TSO6;
 		if (priv->plat->has_gmac4)
@@ -4961,6 +5559,7 @@ int stmmac_dvr_probe(struct device *devi
 		priv->tso = true;
 		dev_info(priv->device, "TSO feature enabled\n");
 	}
+#endif
 
 	if (priv->dma_cap.sphen) {
 		ndev->hw_features |= NETIF_F_GRO;
@@ -5078,6 +5677,10 @@ int stmmac_dvr_probe(struct device *devi
 		}
 	}
 
+#ifdef CONFIG_KSZ_SWITCH
+	sw_mac_init_pre();
+#endif
+
 	ret = stmmac_phy_setup(priv);
 	if (ret) {
 		netdev_err(ndev, "failed to setup phy (%d)\n", ret);
@@ -5103,6 +5706,17 @@ int stmmac_dvr_probe(struct device *devi
 	stmmac_init_fs(ndev);
 #endif
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Point to real private structure holding hardware information. */
+	setup_ksz_mac(priv, ndev);
+	priv->sw_mac.sw_pdev = to_platform_device(device);
+
+#if !defined(CONFIG_KSZ_IBA_ONLY)
+	if (priv->sw_mac.port.sw)
+		ret = sw_mac_init(ndev, &priv->sw_mac);
+#endif
+#endif
+
 	return ret;
 
 error_serdes_powerup:
@@ -5135,6 +5749,10 @@ int stmmac_dvr_remove(struct device *dev
 
 	netdev_info(priv->dev, "%s: removing driver", __func__);
 
+#ifdef CONFIG_KSZ_SWITCH
+	sw_mac_remove(ndev, &priv->sw_mac);
+#endif
+
 	stmmac_stop_all_dma(priv);
 	stmmac_mac_set(priv, priv->ioaddr, false);
 	netif_carrier_off(ndev);
@@ -5180,6 +5798,12 @@ int stmmac_suspend(struct device *dev)
 	if (!ndev || !netif_running(ndev))
 		return 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	phylink_mac_change(priv->phylink, false);
 
 	mutex_lock(&priv->lock);
@@ -5272,6 +5896,12 @@ int stmmac_resume(struct device *dev)
 	if (!netif_running(ndev))
 		return 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	/* Power Down bit, into the PM register, is cleared
 	 * automatically as soon as a magic packet or a Wake-up frame
 	 * is received. Anyway, it's better to manually clear
diff -Napur linux-5.10.68-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c linux-5.10.68/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
--- linux-5.10.68-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c	2021-09-22 03:28:07.000000000 -0700
+++ linux-5.10.68/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c	2021-09-24 18:09:10.689967902 -0700
@@ -287,6 +287,21 @@ static int stmmac_mdio_write(struct mii_
 				  100, 10000);
 }
 
+#ifdef CONFIG_KSZ_SMI
+/* These SMI access functions may require non-standard MDIO signal and so the
+ * standard phy_read and phy_write functions cannot be used.
+ */
+int stmmac_smi_read(struct mii_bus *bus, int phy_id, int regnum)
+{
+	return stmmac_mdio_read(bus, phy_id, regnum);
+}
+
+int stmmac_smi_write(struct mii_bus *bus, int phy_id, int regnum, u16 val)
+{
+	return stmmac_mdio_write(bus, phy_id, regnum, val);
+}
+#endif
+
 /**
  * stmmac_mdio_reset
  * @bus: points to the mii_bus structure
