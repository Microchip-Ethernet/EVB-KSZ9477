diff -Napur linux-6.6.6-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c linux-6.6.6/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c
--- linux-6.6.6-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c	2023-12-11 01:40:17.000000000 -0800
+++ linux-6.6.6/drivers/net/ethernet/stmicro/stmmac/stmmac_ethtool.c	2025-06-30 00:38:51.270357628 -0700
@@ -311,6 +311,12 @@ static int stmmac_ethtool_get_link_ksett
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (priv->hw->pcs & STMMAC_PCS_RGMII ||
 	    priv->hw->pcs & STMMAC_PCS_SGMII) {
 		struct rgmii_adv adv;
@@ -397,6 +403,14 @@ stmmac_ethtool_set_link_ksettings(struct
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (priv->hw->pcs & STMMAC_PCS_RGMII ||
 	    priv->hw->pcs & STMMAC_PCS_SGMII) {
 		/* Only support ANE */
@@ -450,6 +464,9 @@ static void stmmac_ethtool_gregs(struct
 	struct stmmac_priv *priv = netdev_priv(dev);
 	u32 *reg_space = (u32 *) space;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	stmmac_dump_mac_regs(priv, priv->hw, reg_space);
 	stmmac_dump_dma_regs(priv, priv->ioaddr, reg_space);
 
@@ -470,6 +487,10 @@ static int stmmac_nway_reset(struct net_
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
 	return phylink_ethtool_nway_reset(priv->phylink);
 }
 
@@ -480,6 +501,9 @@ static void stmmac_get_ringparam(struct
 {
 	struct stmmac_priv *priv = netdev_priv(netdev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	ring->rx_max_pending = DMA_MAX_RX_SIZE;
 	ring->tx_max_pending = DMA_MAX_TX_SIZE;
 	ring->rx_pending = priv->dma_conf.dma_rx_size;
@@ -511,6 +535,11 @@ stmmac_get_pauseparam(struct net_device
 	struct stmmac_priv *priv = netdev_priv(netdev);
 	struct rgmii_adv adv_lp;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (IS_ERR(priv->phylink))
+		return;
+#endif
 	if (priv->hw->pcs && !stmmac_pcs_get_adv_lp(priv, priv->ioaddr, &adv_lp)) {
 		pause->autoneg = 1;
 		if (!adv_lp.pause)
@@ -527,6 +556,14 @@ stmmac_set_pauseparam(struct net_device
 	struct stmmac_priv *priv = netdev_priv(netdev);
 	struct rgmii_adv adv_lp;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (priv->hw->pcs && !stmmac_pcs_get_adv_lp(priv, priv->ioaddr, &adv_lp)) {
 		pause->autoneg = 1;
 		if (!adv_lp.pause)
@@ -594,6 +631,11 @@ static void stmmac_get_ethtool_stats(str
 	unsigned long count;
 	unsigned int start;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (IS_ERR(priv->phylink))
+		return;
+#endif
 	if (priv->dma_cap.asp) {
 		for (i = 0; i < STMMAC_SAFETY_FEAT_SIZE; i++) {
 			if (!stmmac_safety_feat_dump(priv, &priv->sstats, i,
@@ -686,6 +728,9 @@ static int stmmac_get_sset_count(struct
 	u32 rx_cnt = priv->plat->rx_queues_to_use;
 	int i, len, safety_len = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	switch (sset) {
 	case ETH_SS_STATS:
 		len = STMMAC_STATS_LEN + STMMAC_QSTATS +
@@ -741,6 +786,9 @@ static void stmmac_get_strings(struct ne
 	u8 *p = data;
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	switch (stringset) {
 	case ETH_SS_STATS:
 		if (priv->dma_cap.asp) {
@@ -784,6 +832,13 @@ static void stmmac_get_wol(struct net_de
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return;
+	if (IS_ERR(priv->phylink))
+		return;
+#endif
 	if (!priv->plat->pmt)
 		return phylink_ethtool_get_wol(priv->phylink, wol);
 
@@ -805,6 +860,14 @@ static int stmmac_set_wol(struct net_dev
 	if (!device_can_wakeup(priv->device))
 		return -EOPNOTSUPP;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (!priv->plat->pmt) {
 		int ret = phylink_ethtool_set_wol(priv->phylink, wol);
 
@@ -843,6 +906,12 @@ static int stmmac_ethtool_op_get_eee(str
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (!priv->dma_cap.eee)
 		return -EOPNOTSUPP;
 
@@ -860,6 +929,14 @@ static int stmmac_ethtool_op_set_eee(str
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+	if (IS_ERR(priv->phylink))
+		return -ENODEV;
+#endif
+
 	if (!priv->dma_cap.eee)
 		return -EOPNOTSUPP;
 
@@ -918,6 +995,9 @@ static int __stmmac_get_coalesce(struct
 	u32 rx_cnt;
 	u32 tx_cnt;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	rx_cnt = priv->plat->rx_queues_to_use;
 	tx_cnt = priv->plat->tx_queues_to_use;
 	max_cnt = max(rx_cnt, tx_cnt);
@@ -972,6 +1052,12 @@ static int __stmmac_set_coalesce(struct
 	u32 rx_cnt;
 	u32 tx_cnt;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	rx_cnt = priv->plat->rx_queues_to_use;
 	tx_cnt = priv->plat->tx_queues_to_use;
 	max_cnt = max(rx_cnt, tx_cnt);
@@ -1067,6 +1153,9 @@ static u32 stmmac_get_rxfh_key_size(stru
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	return sizeof(priv->rss.key);
 }
 
@@ -1074,6 +1163,9 @@ static u32 stmmac_get_rxfh_indir_size(st
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	return ARRAY_SIZE(priv->rss.table);
 }
 
@@ -1083,6 +1175,9 @@ static int stmmac_get_rxfh(struct net_de
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int i;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	if (indir) {
 		for (i = 0; i < ARRAY_SIZE(priv->rss.table); i++)
 			indir[i] = priv->rss.table[i];
@@ -1102,6 +1197,12 @@ static int stmmac_set_rxfh(struct net_de
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int i;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	if ((hfunc != ETH_RSS_HASH_NO_CHANGE) && (hfunc != ETH_RSS_HASH_TOP))
 		return -EOPNOTSUPP;
 
@@ -1122,6 +1223,9 @@ static void stmmac_get_channels(struct n
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	chan->rx_count = priv->plat->rx_queues_to_use;
 	chan->tx_count = priv->plat->tx_queues_to_use;
 	chan->max_rx = priv->dma_cap.number_rx_queues;
@@ -1133,6 +1237,12 @@ static int stmmac_set_channels(struct ne
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	if (chan->rx_count > priv->dma_cap.number_rx_queues ||
 	    chan->tx_count > priv->dma_cap.number_tx_queues ||
 	    !chan->rx_count || !chan->tx_count)
@@ -1146,6 +1256,9 @@ static int stmmac_get_ts_info(struct net
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	if ((priv->dma_cap.time_stamp || priv->dma_cap.atime_stamp)) {
 
 		info->so_timestamping = SOF_TIMESTAMPING_TX_SOFTWARE |
@@ -1182,6 +1295,9 @@ static int stmmac_get_tunable(struct net
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
 	switch (tuna->id) {
 	case ETHTOOL_RX_COPYBREAK:
 		*(u32 *)data = priv->rx_copybreak;
@@ -1201,6 +1317,12 @@ static int stmmac_set_tunable(struct net
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	switch (tuna->id) {
 	case ETHTOOL_RX_COPYBREAK:
 		priv->rx_copybreak = *(u32 *)data;
diff -Napur linux-6.6.6-orig/drivers/net/ethernet/stmicro/stmmac/stmmac.h linux-6.6.6/drivers/net/ethernet/stmicro/stmmac/stmmac.h
--- linux-6.6.6-orig/drivers/net/ethernet/stmicro/stmmac/stmmac.h	2023-12-11 01:40:17.000000000 -0800
+++ linux-6.6.6/drivers/net/ethernet/stmicro/stmmac/stmmac.h	2025-06-30 00:13:25.196950660 -0700
@@ -25,6 +25,16 @@
 #include <net/xdp.h>
 #include <uapi/linux/bpf.h>
 
+#if defined(CONFIG_LAN937X_SWITCH)
+#ifndef CONFIG_KSZ_SWITCH
+#define CONFIG_KSZ_SWITCH
+#endif
+#endif
+
+#ifdef CONFIG_KSZ_SWITCH
+#include "../../micrel/ksz_mac.h"
+#endif
+
 struct stmmac_resources {
 	void __iomem *addr;
 	u8 mac[ETH_ALEN];
@@ -331,8 +341,40 @@ struct stmmac_priv {
 	/* XDP BPF Program */
 	unsigned long *af_xdp_zc_qps;
 	struct bpf_prog *xdp_prog;
+
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac sw_mac;
+#endif
 };
 
+#ifdef CONFIG_KSZ_SWITCH
+static inline struct ksz_mac *get_ksz_mac(void *ptr)
+{
+	struct stmmac_priv *dev = ptr;
+
+	return &dev->sw_mac;
+}
+
+static inline bool is_virt_dev(struct stmmac_priv *dev)
+{
+	struct ksz_mac *priv = get_ksz_mac(dev);
+
+	if (priv->hw_priv && priv != priv->hw_priv)
+		return true;
+	return false;
+}
+
+static inline struct ksz_sw *get_sw(struct stmmac_priv *dev)
+{
+	return dev->sw_mac.port.sw;
+}
+
+static inline struct stmmac_priv *get_hw_dev(struct stmmac_priv *dev)
+{
+	return dev->sw_mac.hw_priv->dev;
+}
+#endif
+
 enum stmmac_state {
 	STMMAC_DOWN,
 	STMMAC_RESET_REQUESTED,
diff -Napur linux-6.6.6-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c linux-6.6.6/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
--- linux-6.6.6-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c	2023-12-11 01:40:17.000000000 -0800
+++ linux-6.6.6/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c	2025-07-18 16:10:16.934589833 -0700
@@ -43,6 +43,10 @@
 #include <net/pkt_cls.h>
 #include <net/xdp_sock_drv.h>
 #include "stmmac_ptp.h"
+
+#ifdef CONFIG_KSZ_SWITCH
+#include "../../micrel/ksz_mac_pre.c"
+#endif
 #include "stmmac.h"
 #include "stmmac_xdp.h"
 #include <linux/reset.h>
@@ -179,6 +183,46 @@ int stmmac_bus_clks_config(struct stmmac
 }
 EXPORT_SYMBOL_GPL(stmmac_bus_clks_config);
 
+#ifdef CONFIG_KSZ_SWITCH
+static struct ksz_mac *get_netdev_priv(struct net_device *net)
+{
+	return get_ksz_mac(netdev_priv(net));
+}
+
+static void sw_reset_mac_mib(struct ksz_mac *priv)
+{
+}
+
+static void setup_ksz_mac(struct stmmac_priv *dev, struct net_device *net)
+{
+	dev->sw_mac.dev = dev;
+	dev->sw_mac.net = net;
+	dev->sw_mac.hw_priv = &dev->sw_mac;
+}
+
+#ifndef CONFIG_KSZ_SWITCH_EMBEDDED
+#define USE_SPEED_LINK
+#define USE_MIB
+#endif
+
+#define KSZ_USE_IOCTL
+#define KSZ_USE_PRIVATE_IOCTL
+#define KSZ_USE_PHYLINK
+#define KSZ_USE_SPI_DEV
+#define KSZ_USE_TX_QUEUE
+#define KSZ_USE_CLOSE_HW
+#define KSZ_USE_COMPLETED_QUEUE
+#include "../../micrel/ksz_mac.c"
+
+static void hw_set_multicast(void *hw_priv, int multicast)
+{
+}  /* hw_set_multicast */
+
+static void hw_set_promisc(void *hw_priv, int promisc)
+{
+}  /* hw_set_promisc */
+#endif
+
 /**
  * stmmac_verify_args - verify the driver parameters.
  * Description: it checks the driver parameters and set a default in case of
@@ -976,6 +1020,26 @@ static void stmmac_mac_link_down(struct
 {
 	struct stmmac_priv *priv = netdev_priv(to_net_dev(config->dev));
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		struct ksz_mac *sw_mac;
+
+		priv = get_hw_dev(priv);
+		sw_mac = get_ksz_mac(priv);
+		if (sw_is_switch(sw_mac->port.sw)) {
+
+#ifdef CONFIG_KSZ_IBA_ONLY
+			/* Cannot turn off queue while IBA is being used. */
+			if (sw_mac->port.need_mac)
+				return;
+#endif
+			if (interface == PHY_INTERFACE_MODE_INTERNAL) {
+				return;
+			}
+		}
+		sw_mac->port.ready = false;
+	} while (0);
+#endif
 	stmmac_mac_set(priv, priv->ioaddr, false);
 	priv->eee_active = false;
 	priv->tx_lpi_enabled = false;
@@ -999,6 +1063,22 @@ static void stmmac_mac_link_up(struct ph
 	    priv->plat->serdes_powerup)
 		priv->plat->serdes_powerup(priv->dev, priv->plat->bsp_priv);
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		struct ksz_mac *sw_mac;
+
+		priv = get_hw_dev(priv);
+		sw_mac = get_ksz_mac(priv);
+		if (sw_is_switch(sw_mac->port.sw)) {
+			if (interface == PHY_INTERFACE_MODE_INTERNAL) {
+				return;
+			}
+		}
+
+		/* MAC is ready to send after function ends. */
+		sw_mac->port.ready = true;
+	} while (0);
+#endif
 	old_ctrl = readl(priv->ioaddr + MAC_CTRL_REG);
 	ctrl = old_ctrl & ~priv->hw->link.speed_mask;
 
@@ -1150,6 +1230,28 @@ static int stmmac_init_phy(struct net_de
 	struct fwnode_handle *fwnode;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (priv->phylink) {
+		struct ksz_mac *sw_mac = get_ksz_mac(priv);
+		struct ksz_sw *sw = sw_mac->port.sw;
+
+		if (sw_is_switch(sw)) {
+			struct phy_device *phydev;
+
+#ifdef CONFIG_KSZ_IBA_ONLY
+			if (sw_mac->hw_priv->dev == priv)
+				return 0;
+#endif
+			phydev = sw_mac->port.phydev;
+			ret = phylink_connect_phy(priv->phylink, phydev);
+			if (!ret) {
+				sw_mac->phylink = priv->phylink;
+			}
+			return ret;
+		}
+	}
+#endif
+
 	if (!phylink_expects_phy(priv->phylink))
 		return 0;
 
@@ -1208,6 +1310,12 @@ static void stmmac_set_half_duplex(struc
 			(MAC_10HD | MAC_100HD | MAC_1000HD);
 }
 
+#ifdef CONFIG_KSZ_SMI
+/* Defined in stmmac_mdio.c. */
+int stmmac_smi_read(struct mii_bus *bus, int phy_id, int regnum);
+int stmmac_smi_write(struct mii_bus *bus, int phy_id, int regnum, u16 val);
+#endif
+
 static int stmmac_phy_setup(struct stmmac_priv *priv)
 {
 	struct stmmac_mdio_bus_data *mdio_bus_data;
@@ -1252,6 +1360,26 @@ static int stmmac_phy_setup(struct stmma
 	if (!fwnode)
 		fwnode = dev_fwnode(priv->device);
 
+#if defined(CONFIG_KSZ_SWITCH) && !defined(CONFIG_KSZ_IBA_ONLY)
+	do {
+		int err = 0;
+		struct ksz_mac *sw_mac = get_ksz_mac(priv);
+
+#ifdef CONFIG_KSZ_SMI
+		int irq = get_sw_irq(NULL);
+
+		err = smi_probe(&sw_mac->sw_pdev, priv->mii, irq,
+				stmmac_smi_read, stmmac_smi_write);
+#endif
+		if (!err)
+			err = sw_mac_chk(sw_mac);
+
+		/* Switch driver defines its own phylink. */
+		if (!err)
+			return 0;
+	} while (0);
+#endif
+
 	phylink = phylink_create(&priv->phylink_config, fwnode,
 				 mode, &stmmac_phylink_mac_ops);
 	if (IS_ERR(phylink))
@@ -2562,6 +2690,12 @@ static int stmmac_tx_clean(struct stmmac
 	u32 tx_packets = 0, tx_errors = 0;
 	unsigned long flags;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac *hw_priv = get_ksz_mac(priv);
+
+	sw_init_queue_len(hw_priv);
+#endif
+
 	__netif_tx_lock_bh(netdev_get_tx_queue(priv->dev, queue));
 
 	tx_q->xsk_frames_done = 0;
@@ -2661,6 +2795,10 @@ static int stmmac_tx_clean(struct stmmac
 			if (likely(skb)) {
 				pkts_compl++;
 				bytes_compl += skb->len;
+
+#ifdef CONFIG_KSZ_SWITCH
+				sw_update_queue_len(hw_priv, skb);
+#endif
 				dev_consume_skb_any(skb);
 				tx_q->tx_skbuff[entry] = NULL;
 			}
@@ -2672,6 +2810,9 @@ static int stmmac_tx_clean(struct stmmac
 	}
 	tx_q->dirty_tx = entry;
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (!sw_completed_queue(hw_priv, queue))
+#endif
 	netdev_tx_completed_queue(netdev_get_tx_queue(priv->dev, queue),
 				  pkts_compl, bytes_compl);
 
@@ -2682,6 +2823,11 @@ static int stmmac_tx_clean(struct stmmac
 		netif_dbg(priv, tx_done, priv->dev,
 			  "%s: restart transmit\n", __func__);
 		netif_tx_wake_queue(netdev_get_tx_queue(priv->dev, queue));
+
+#ifdef CONFIG_KSZ_SWITCH
+		wake_dev_queues(get_sw(priv), priv->dev,
+				netdev_get_tx_queue(priv->dev, queue));
+#endif
 	}
 
 	if (tx_q->xsk_pool) {
@@ -2753,6 +2899,11 @@ static void stmmac_tx_err(struct stmmac_
 
 	priv->xstats.tx_errors++;
 	netif_tx_wake_queue(netdev_get_tx_queue(priv->dev, chan));
+
+#ifdef CONFIG_KSZ_SWITCH
+	wake_dev_queues(get_sw(priv), priv->dev,
+			netdev_get_tx_queue(priv->dev, chan));
+#endif
 }
 
 /**
@@ -3305,6 +3456,133 @@ static int stmmac_fpe_start_wq(struct st
 	return 0;
 }
 
+#ifdef CONFIG_KSZ_SWITCH
+static int sw_mac_init(struct net_device *dev, struct ksz_mac *sw_mac)
+{
+	struct ksz_sw *sw;
+	int err;
+	int i;
+	int port_count;
+	int dev_count;
+	int mib_port_count;
+	char dev_label[IFNAMSIZ];
+	struct stmmac_priv *priv, *hw_dev;
+	struct ksz_mac *hw_priv;
+	struct net_device *main_dev;
+	struct device *device;
+	netdev_features_t features;
+
+	priv = sw_mac->dev;
+	hw_dev = sw_mac->dev;
+	sw = sw_mac->port.sw;
+
+	/* This is the main private structure holding hardware information. */
+	hw_priv = sw_mac;
+	hw_priv->parent = sw->dev;
+	main_dev = priv->dev;
+	device = priv->device;
+	features = main_dev->features;
+
+	prep_sw_first(sw, &port_count, &mib_port_count, &dev_count, dev_label,
+		      &stmmac_phylink_mac_ops);
+
+	/* The main switch phydev will not be attached. */
+	if (dev_count > 1) {
+		struct phy_device *phydev = sw->phy[0];
+
+		phydev->interface = priv->plat->phy_interface;
+	}
+
+	/* Save the base device name. */
+	strlcpy(dev_label, hw_priv->net->name, IFNAMSIZ);
+
+#ifndef CONFIG_KSZ_SMI
+	if (sw->net_ops->setup_mdiobus)
+		sw->net_ops->setup_mdiobus(sw, priv->mii);
+#endif
+	prep_sw_dev(sw, sw_mac, 0, port_count, mib_port_count, dev_label,
+		    priv->plat->phy_interface);
+
+	/* Use the phylink created by the switch driver. */
+	if (!priv->phylink)
+		priv->phylink = sw_mac->port.pl;
+
+	INIT_DELAYED_WORK(&hw_priv->promisc_reset, promisc_reset_work);
+
+#ifdef CONFIG_KSZ_IBA_ONLY
+	INIT_WORK(&hw_priv->rmv_dev, rmv_dev_work);
+#endif
+
+	for (i = 1; i < dev_count; i++) {
+		dev = devm_alloc_etherdev_mqs(device,
+					      sizeof(struct stmmac_priv),
+					      MTL_MAX_TX_QUEUES,
+					      MTL_MAX_RX_QUEUES);
+		if (!dev)
+			break;
+
+		priv = netdev_priv(dev);
+		priv->dev = dev;
+		priv->device = device;
+		priv->plat = hw_dev->plat;
+		priv->hw = hw_dev->hw;
+
+		sw_mac = &priv->sw_mac;
+		sw_mac->hw_priv = hw_priv;
+		sw_mac->dev = priv;
+		sw_mac->net = dev;
+
+		mutex_init(&priv->lock);
+
+		dev->netdev_ops = main_dev->netdev_ops;
+		dev->ethtool_ops = main_dev->ethtool_ops;
+
+		dev->base_addr = main_dev->base_addr;
+		dev_addr_set(dev, main_dev->dev_addr);
+
+		dev->hard_header_len = main_dev->hard_header_len;
+		dev->hw_features = main_dev->hw_features;
+		dev->features = features;
+
+		SET_NETDEV_DEV(dev, device);
+
+		prep_sw_dev(sw, sw_mac, i, port_count, mib_port_count,
+			    dev_label, priv->plat->phy_interface);
+		priv->phylink = sw_mac->port.pl;
+
+		err = register_netdev(dev);
+		if (err) {
+			free_netdev(dev);
+			break;
+		}
+
+		netif_carrier_off(dev);
+	}
+
+#if !defined(CONFIG_KSZ_IBA_ONLY)
+	/*
+	 * Adding sysfs support is optional for network device.  It is more
+	 * convenient to locate eth0 more or less than spi<bus>.<select>,
+	 * especially when the bus number is auto assigned which results in a
+	 * very big number.
+	 */
+	err = init_sw_sysfs(sw, &hw_priv->sysfs, &main_dev->dev);
+
+#ifdef CONFIG_1588_PTP
+	if (sw->features & PTP_HW)
+		err = init_ptp_sysfs(&hw_priv->ptp_sysfs, &main_dev->dev);
+#endif
+#ifdef CONFIG_KSZ_DLR
+	if (sw->features & DLR_HW)
+		err = init_dlr_sysfs(&main_dev->dev);
+#endif
+	sw_device_seen++;
+#endif
+
+	return 0;
+}
+#endif
+
 /**
  * stmmac_hw_setup - setup mac in a usable state.
  *  @dev : pointer to the device structure.
@@ -3327,6 +3605,10 @@ static int stmmac_hw_setup(struct net_de
 	u32 chan;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+#endif
+
 	/* DMA initialization and SW reset */
 	ret = stmmac_init_dma_engine(priv);
 	if (ret < 0) {
@@ -3754,6 +4036,10 @@ stmmac_setup_dma_desc(struct stmmac_priv
 	struct stmmac_dma_conf *dma_conf;
 	int chan, bfsize, ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_sw *sw = get_sw(priv);
+#endif
+
 	dma_conf = kzalloc(sizeof(*dma_conf), GFP_KERNEL);
 	if (!dma_conf) {
 		netdev_err(priv->dev, "%s: DMA conf allocation failed\n",
@@ -3768,6 +4054,11 @@ stmmac_setup_dma_desc(struct stmmac_priv
 	if (bfsize < BUF_SIZE_16KiB)
 		bfsize = stmmac_set_bfsize(mtu, 0);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (sw_is_switch(sw)) {
+		bfsize += sw->net_ops->get_mtu(sw);
+	}
+#endif
 	dma_conf->dma_buf_sz = bfsize;
 	/* Chose the tx/rx size from the already defined one in the
 	 * priv struct. (if defined)
@@ -3830,6 +4121,16 @@ static int __stmmac_open(struct net_devi
 	u32 chan;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac *sw_mac = &priv->sw_mac;
+	struct ksz_mac *hw_priv = sw_mac->hw_priv;
+	struct stmmac_priv *hw_dev = get_hw_dev(priv);
+	struct stmmac_priv *orig_priv = priv;
+	struct ksz_sw *sw = sw_mac->port.sw;
+	struct net_device *orig_dev = dev;
+	int rx_mode = 0;
+#endif
+
 	ret = pm_runtime_resume_and_get(priv->device);
 	if (ret < 0)
 		return ret;
@@ -3848,6 +4149,17 @@ static int __stmmac_open(struct net_devi
 		}
 	}
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (!hw_priv->do_hw && sw_mac_open_first(dev, sw_mac, &rx_mode)) {
+		sw_mac->skip_hw = 1;
+		goto skip_hw;
+	}
+
+	/* Make sure only real hardware is operated. */
+	priv = hw_dev;
+	dev = priv->dev;
+#endif
+
 	priv->rx_copybreak = STMMAC_RX_COPYBREAK;
 
 	buf_sz = dma_conf->dma_buf_sz;
@@ -3873,28 +4185,87 @@ static int __stmmac_open(struct net_devi
 
 	stmmac_init_coalesce(priv);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = orig_priv;
+#endif
 	phylink_start(priv->phylink);
 	/* We may have called phylink_speed_down before */
 	phylink_speed_up(priv->phylink);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (sw_is_switch(sw)) {
+		struct phy_device *phydev;
+
+		phydev = sw_mac->port.phydev;
+
+		/* Do not want polling done. */
+#ifdef CONFIG_MACB_MODULE
+		cancel_delayed_work_sync(&phydev->state_queue);
+#else
+		phy_stop_machine(phydev);
+#endif
+	}
+	priv = hw_dev;
+#endif
+
 	ret = stmmac_request_irq(dev);
 	if (ret)
 		goto irq_error;
 
 	stmmac_enable_all_queues(priv);
+
+#ifdef CONFIG_KSZ_SWITCH
+skip_hw:
+	priv = orig_priv;
+	if (sw_is_switch(sw) && !hw_priv->do_hw) {
+		/* Need to start PHY before opening the port. */
+		if (sw_mac->skip_hw) {
+			struct phy_device *phydev;
+
+			phydev = sw_mac->port.phydev;
+
+			phylink_start(priv->phylink);
+			phylink_speed_up(priv->phylink);
+			/* Do not want polling done. */
+#ifdef CONFIG_MACB_MODULE
+			cancel_delayed_work_sync(&phydev->state_queue);
+#else
+			phy_stop_machine(phydev);
+#endif
+		}
+		sw_mac->skip_hw = 0;
+		dev = orig_dev;
+		sw_mac_open_next(sw, sw_mac->hw_priv, rx_mode);
+		if (sw_mac_open_final(sw, dev, hw_priv, sw_mac)) {
+			netif_tx_start_all_queues(priv->dev);
+			return 0;
+		}
+	}
+#endif
+
 	netif_tx_start_all_queues(priv->dev);
+#ifdef CONFIG_KSZ_SWITCH
+	priv = hw_dev;
+#endif
 	stmmac_enable_all_dma_irq(priv);
 
 	return 0;
 
 irq_error:
+#ifdef CONFIG_KSZ_SWITCH
+	phylink_stop(orig_priv->phylink);
+#else
 	phylink_stop(priv->phylink);
+#endif
 
 	for (chan = 0; chan < priv->plat->tx_queues_to_use; chan++)
 		hrtimer_cancel(&priv->dma_conf.tx_queue[chan].txtimer);
 
 	stmmac_hw_teardown(dev);
 init_error:
+#ifdef CONFIG_KSZ_SWITCH
+	priv = orig_priv;
+#endif
 	phylink_disconnect_phy(priv->phylink);
 init_phy_error:
 	pm_runtime_put(priv->device);
@@ -3907,15 +4278,39 @@ static int stmmac_open(struct net_device
 	struct stmmac_dma_conf *dma_conf;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac *sw_mac = &priv->sw_mac;
+	struct ksz_mac *hw_priv = sw_mac->hw_priv;
+	struct net_device *orig_dev = dev;
+
+	if (!hw_priv->do_hw && hw_priv->opened) {
+		dma_conf = NULL;
+		goto skip_dma;
+	}
+
+	/* Make sure only real hardware is operated. */
+	priv = hw_priv->dev;
+	dev = hw_priv->net;
+#endif
+
 	dma_conf = stmmac_setup_dma_desc(priv, dev->mtu);
 	if (IS_ERR(dma_conf))
 		return PTR_ERR(dma_conf);
 
+#ifdef CONFIG_KSZ_SWITCH
+skip_dma:
+	dev = orig_dev;
+#endif
 	ret = __stmmac_open(dev, dma_conf);
 	if (ret)
 		free_dma_desc_resources(priv, dma_conf);
 
 	kfree(dma_conf);
+
+#ifdef CONFIG_KSZ_IBA_ONLY
+	if (!sw_is_switch(sw))
+		create_sw_dev(dev, priv);
+#endif
 	return ret;
 }
 
@@ -3940,12 +4335,47 @@ static int stmmac_release(struct net_dev
 	struct stmmac_priv *priv = netdev_priv(dev);
 	u32 chan;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac *sw_mac = get_ksz_mac(priv);
+	struct ksz_mac *hw_priv = sw_mac->hw_priv;
+	struct ksz_sw *sw = sw_mac->port.sw;
+	struct net_device *orig_dev = dev;
+	int iba = 0;
+#endif
+
 	if (device_may_wakeup(priv->device))
 		phylink_speed_down(priv->phylink, false);
 	/* Stop and disconnect the PHY */
 	phylink_stop(priv->phylink);
 	phylink_disconnect_phy(priv->phylink);
 
+#ifdef CONFIG_KSZ_SWITCH
+#ifdef CONFIG_KSZ_IBA
+	iba = IBA_USE_CODE_SOFT_RESET;
+#endif
+	if (!hw_priv->do_hw && sw_mac_close(dev, sw_mac, iba)) {
+		bool stop_queue = true;
+
+		/* Do not shut off queue for main device. */
+#ifdef CONFIG_KSZ_IBA_ONLY
+		do {
+			struct ksz_sw *sw = get_sw(priv);
+
+			if (hw_priv->port.need_mac &&
+			    dev == sw->main_dev)
+				stop_queue = false;
+		} while (0);
+#endif
+		priv->sw_mac.phylink = NULL;
+		if (stop_queue)
+			netif_tx_disable(dev);
+		return 0;
+	}
+
+	/* Make sure only real hardware is operated. */
+	priv = get_hw_dev(priv);
+#endif
+
 	stmmac_disable_all_queues(priv);
 
 	for (chan = 0; chan < priv->plat->tx_queues_to_use; chan++)
@@ -3953,6 +4383,10 @@ static int stmmac_release(struct net_dev
 
 	netif_tx_disable(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	dev = priv->dev;
+#endif
+
 	/* Free the IRQ lines */
 	stmmac_free_irq(dev, REQ_IRQ_ERR_ALL, 0);
 
@@ -3974,8 +4408,14 @@ static int stmmac_release(struct net_dev
 	if (priv->plat->serdes_powerdown)
 		priv->plat->serdes_powerdown(dev, priv->plat->bsp_priv);
 
+#ifdef CONFIG_KSZ_SWITCH
+	dev = orig_dev;
+#endif
 	netif_carrier_off(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (!sw_is_switch(sw) || !(sw->features & PTP_HW))
+#endif
 	stmmac_release_ptp(priv);
 
 	pm_runtime_put(priv->device);
@@ -4380,6 +4820,20 @@ static netdev_tx_t stmmac_xmit(struct sk
 	unsigned long flags;
 	dma_addr_t des;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_mac *sw_mac = get_ksz_mac(priv);
+	struct ksz_sw *sw = get_sw(priv);
+
+	/* May be called from switch driver. */
+	if (netif_tx_queue_stopped(netdev_get_tx_queue(dev, queue)))
+		return NETDEV_TX_BUSY;
+
+	skb = sw_mac_tx_pre(skb, sw_mac, 2);
+	if (sw_mac != sw_mac->hw_priv) {
+		priv = sw_mac->hw_priv->dev;
+	}
+#endif
+
 	tx_q = &priv->dma_conf.tx_queue[queue];
 	txq_stats = &priv->xstats.txq_stats[queue];
 	first_tx = tx_q->cur_tx;
@@ -4387,6 +4841,16 @@ static netdev_tx_t stmmac_xmit(struct sk
 	if (priv->tx_path_in_lpi_mode && priv->eee_sw_timer_en)
 		stmmac_disable_eee_mode(priv);
 
+#ifdef CONFIG_KSZ_SWITCH
+	skb = sw_mac_tx(dev, skb, sw_mac);
+	if (!skb) {
+		return NETDEV_TX_OK;
+	}
+	nopaged_len = skb_headlen(skb);
+	nfrags = skb_shinfo(skb)->nr_frags;
+	gso = skb_shinfo(skb)->gso_type;
+#endif
+
 	/* Manage oversized TCP frames for GMAC4 device */
 	if (skb_is_gso(skb) && priv->tso) {
 		if (gso & (SKB_GSO_TCPV4 | SKB_GSO_TCPV6))
@@ -4399,6 +4863,11 @@ static netdev_tx_t stmmac_xmit(struct sk
 		if (!netif_tx_queue_stopped(netdev_get_tx_queue(dev, queue))) {
 			netif_tx_stop_queue(netdev_get_tx_queue(priv->dev,
 								queue));
+
+#ifdef CONFIG_KSZ_SWITCH
+			stop_dev_queues(sw, dev,
+					netdev_get_tx_queue(priv->dev, queue));
+#endif
 			/* This is a hard error, log it. */
 			netdev_err(priv->dev,
 				   "%s: Tx Ring full when queue awake\n",
@@ -4587,6 +5056,9 @@ static netdev_tx_t stmmac_xmit(struct sk
 
 	stmmac_set_tx_owner(priv, first);
 
+#ifdef CONFIG_KSZ_IBA
+	if (skb->protocol != htons(IBA_TAG_TYPE))
+#endif
 	netdev_tx_sent_queue(netdev_get_tx_queue(dev, queue), skb->len);
 
 	stmmac_enable_dma_transmission(priv, priv->ioaddr);
@@ -5265,6 +5737,11 @@ static int stmmac_rx(struct stmmac_priv
 	int xdp_status = 0;
 	int buf_sz;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct stmmac_priv *hw_dev = get_hw_dev(priv);
+	struct ksz_sw *sw = get_sw(priv);
+#endif
+
 	dma_dir = page_pool_get_dma_dir(rx_q->page_pool);
 	buf_sz = DIV_ROUND_UP(priv->dma_conf.dma_buf_sz, PAGE_SIZE) * PAGE_SIZE;
 	limit = min(priv->dma_conf.dma_rx_size - 1, (unsigned int)limit);
@@ -5484,6 +5961,27 @@ drain_data:
 
 		stmmac_get_rx_hwtstamp(priv, p, np, skb);
 		stmmac_rx_vlan(priv->dev, skb);
+
+#ifdef CONFIG_KSZ_SWITCH
+		if (sw_is_switch(sw)) {
+			struct stmmac_priv *hw_priv;
+			int rxlen = 0;
+
+			hw_priv = sw_rx_proc(sw, skb, &rxlen);
+			if (!hw_priv) {
+				if (rxlen) {
+					rx_packets++;
+					rx_bytes += rxlen;
+					count++;
+				}
+				continue;
+			}
+
+			/* Use private structure in network device. */
+			priv = hw_priv;
+		}
+		/* Need to take care of stats for each device. */
+#endif
 		skb->protocol = eth_type_trans(skb, priv->dev);
 
 		if (unlikely(!coe))
@@ -5501,6 +5999,11 @@ drain_data:
 		rx_packets++;
 		rx_bytes += len;
 		count++;
+
+#ifdef CONFIG_KSZ_SWITCH
+		/* Use the real hardware private structure. */
+		priv = hw_dev;
+#endif
 	}
 
 	if (status & rx_not_ls || skb) {
@@ -5660,6 +6163,25 @@ static void stmmac_set_rx_mode(struct ne
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	priv = get_hw_dev(priv);
+	if (sw_set_rx_mode(dev)) {
+		struct ksz_mac *hw_priv = get_ksz_mac(priv);
+
+		dev = hw_priv->net;
+		if (hw_priv->hw_promisc)
+			dev->flags |= IFF_PROMISC;
+		else
+			dev->flags &= ~IFF_PROMISC;
+		if (hw_priv->hw_multi)
+			dev->flags |= IFF_ALLMULTI;
+		else
+			dev->flags &= ~IFF_ALLMULTI;
+		stmmac_set_filter(priv, priv->hw, dev);
+		return;
+	}
+#endif
+
 	stmmac_set_filter(priv, priv->hw, dev);
 }
 
@@ -5682,6 +6204,17 @@ static int stmmac_change_mtu(struct net_
 	const int mtu = new_mtu;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct net_device *orig_dev = dev;
+
+	if (is_virt_mac(get_ksz_mac(priv))) {
+		new_mtu = STMMAC_ALIGN(new_mtu);
+		dev->mtu = mtu;
+		netdev_update_features(dev);
+		return 0;
+	}
+#endif
+
 	if (txfifosz == 0)
 		txfifosz = priv->dma_cap.tx_fifo_size;
 
@@ -5698,6 +6231,10 @@ static int stmmac_change_mtu(struct net_
 	if ((txfifosz < new_mtu) || (new_mtu > BUF_SIZE_16KiB))
 		return -EINVAL;
 
+#ifdef CONFIG_KSZ_SWITCH
+	sw_mac_close_for_hw(get_ksz_mac(priv), &dev);
+	priv = netdev_priv(dev);
+#endif
 	if (netif_running(dev)) {
 		netdev_dbg(priv->dev, "restarting interface to change its MTU\n");
 		/* Try to allocate the new DMA conf with the new mtu */
@@ -5721,6 +6258,11 @@ static int stmmac_change_mtu(struct net_
 		kfree(dma_conf);
 
 		stmmac_set_rx_mode(dev);
+
+#ifdef CONFIG_KSZ_SWITCH
+		sw_mac_open_for_hw(get_ksz_mac(priv), dev);
+		dev = orig_dev;
+#endif
 	}
 
 	dev->mtu = mtu;
@@ -5734,6 +6276,12 @@ static netdev_features_t stmmac_fix_feat
 {
 	struct stmmac_priv *priv = netdev_priv(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return features;
+#endif
+
 	if (priv->plat->rx_coe == STMMAC_RX_COE_NONE)
 		features &= ~NETIF_F_RXCSUM;
 
@@ -5764,6 +6312,12 @@ static int stmmac_set_features(struct ne
 {
 	struct stmmac_priv *priv = netdev_priv(netdev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	/* Keep the COE Type in case of csum is supporting */
 	if (features & NETIF_F_RXCSUM)
 		priv->hw->rx_csum = priv->plat->rx_coe;
@@ -6025,6 +6579,14 @@ static int stmmac_ioctl(struct net_devic
 	struct stmmac_priv *priv = netdev_priv (dev);
 	int ret = -EOPNOTSUPP;
 
+#ifdef CONFIG_KSZ_SWITCH
+	int result;
+
+	result = sw_ioctl(dev, rq, cmd);
+	if (result != -EOPNOTSUPP)
+		return result;
+#endif
+
 	if (!netif_running(dev))
 		return -EINVAL;
 
@@ -6047,6 +6609,17 @@ static int stmmac_ioctl(struct net_devic
 	return ret;
 }
 
+#ifdef CONFIG_KSZ_SWITCH
+static int stmmac_siocdevprivate(struct net_device *dev, struct ifreq *ifr,
+				 void __user *data, int cmd)
+{
+	int result;
+
+	result = sw_private_ioctl(dev, ifr, NULL, cmd);
+	return result;
+}
+#endif
+
 static int stmmac_setup_tc_block_cb(enum tc_setup_type type, void *type_data,
 				    void *cb_priv)
 {
@@ -6130,6 +6703,13 @@ static int stmmac_set_mac_address(struct
 	if (ret)
 		goto set_mac_error;
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		if (sw_mac_set_addr(ndev, &priv->sw_mac))
+			goto set_mac_error;
+	} while (0);
+#endif
+
 	stmmac_set_umac_addr(priv, priv->hw, ndev->dev_addr, 0);
 
 set_mac_error:
@@ -6503,6 +7083,19 @@ static int stmmac_vlan_rx_add_vid(struct
 	bool is_double = false;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct ksz_sw *sw = get_sw(priv);
+
+	if (sw_is_switch(sw)) {
+		if (!is_virt_dev(priv)) {
+			sw->net_ops->add_vid(sw, vid);
+		} else {
+			priv = get_hw_dev(priv);
+			ndev = priv->dev;
+		}
+	}
+#endif
+
 	ret = pm_runtime_resume_and_get(priv->device);
 	if (ret < 0)
 		return ret;
@@ -6534,6 +7127,21 @@ static int stmmac_vlan_rx_kill_vid(struc
 	bool is_double = false;
 	int ret;
 
+#ifdef CONFIG_KSZ_SWITCH
+	do {
+		struct ksz_sw *sw = get_sw(priv);
+
+		if (sw_is_switch(sw)) {
+			if (!is_virt_dev(priv)) {
+				sw->net_ops->kill_vid(sw, vid);
+			} else {
+				priv = get_hw_dev(priv);
+				ndev = priv->dev;
+			}
+		}
+	} while (0);
+#endif
+
 	ret = pm_runtime_resume_and_get(priv->device);
 	if (ret < 0)
 		return ret;
@@ -6967,6 +7575,9 @@ static const struct net_device_ops stmma
 	.ndo_set_features = stmmac_set_features,
 	.ndo_set_rx_mode = stmmac_set_rx_mode,
 	.ndo_tx_timeout = stmmac_tx_timeout,
+#ifdef CONFIG_KSZ_SWITCH
+	.ndo_siocdevprivate = stmmac_siocdevprivate,
+#endif
 	.ndo_eth_ioctl = stmmac_ioctl,
 	.ndo_get_stats64 = stmmac_get_stats64,
 	.ndo_setup_tc = stmmac_setup_tc,
@@ -7169,9 +7780,20 @@ int stmmac_reinit_queues(struct net_devi
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret = 0, i;
 
+#ifdef CONFIG_KSZ_SWITCH
+	struct net_device *orig_dev = dev;
+	struct net_device *hw_dev = dev;
+
+	sw_mac_close_for_hw(get_ksz_mac(priv), &dev);
+	orig_dev = dev;
+#endif
+
 	if (netif_running(dev))
 		stmmac_release(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	dev = hw_dev;
+#endif
 	stmmac_napi_del(dev);
 
 	priv->plat->rx_queues_to_use = rx_cnt;
@@ -7183,10 +7805,20 @@ int stmmac_reinit_queues(struct net_devi
 
 	stmmac_set_half_duplex(priv);
 	stmmac_napi_add(dev);
+#ifdef CONFIG_KSZ_SWITCH
+	dev = orig_dev;
+#endif
 
 	if (netif_running(dev))
 		ret = stmmac_open(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (netif_running(dev)) {
+		priv = netdev_priv(dev);
+		sw_mac_open_for_hw(get_ksz_mac(priv), dev);
+	}
+#endif
+
 	return ret;
 }
 
@@ -7195,6 +7827,10 @@ int stmmac_reinit_ringparam(struct net_d
 	struct stmmac_priv *priv = netdev_priv(dev);
 	int ret = 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	sw_mac_close_for_hw(get_ksz_mac(priv), &dev);
+	priv = get_hw_dev(priv);
+#endif
 	if (netif_running(dev))
 		stmmac_release(dev);
 
@@ -7204,6 +7840,13 @@ int stmmac_reinit_ringparam(struct net_d
 	if (netif_running(dev))
 		ret = stmmac_open(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	if (netif_running(dev)) {
+		priv = netdev_priv(dev);
+		sw_mac_open_for_hw(get_ksz_mac(priv), dev);
+	}
+#endif
+
 	return ret;
 }
 
@@ -7318,9 +7961,11 @@ int stmmac_dvr_probe(struct device *devi
 	struct stmmac_priv *priv;
 	u32 rxq;
 	int i, ret = 0;
+	u32 rx_queues = plat_dat->rx_queues_to_use;
+	u32 tx_queues = plat_dat->tx_queues_to_use;
 
 	ndev = devm_alloc_etherdev_mqs(device, sizeof(struct stmmac_priv),
-				       MTL_MAX_TX_QUEUES, MTL_MAX_RX_QUEUES);
+				       tx_queues, rx_queues);
 	if (!ndev)
 		return -ENOMEM;
 
@@ -7575,6 +8220,10 @@ int stmmac_dvr_probe(struct device *devi
 			goto error_xpcs_setup;
 	}
 
+#ifdef CONFIG_KSZ_SWITCH
+	sw_mac_init_pre();
+#endif
+
 	ret = stmmac_phy_setup(priv);
 	if (ret) {
 		netdev_err(ndev, "failed to setup phy (%d)\n", ret);
@@ -7600,6 +8249,16 @@ int stmmac_dvr_probe(struct device *devi
 	 */
 	pm_runtime_put(device);
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Point to real private structure holding hardware information. */
+	setup_ksz_mac(priv, ndev);
+
+#if !defined(CONFIG_KSZ_IBA_ONLY)
+	if (priv->sw_mac.port.sw)
+		ret = sw_mac_init(ndev, &priv->sw_mac);
+#endif
+#endif
+
 	return ret;
 
 error_netdev_register:
@@ -7635,6 +8294,10 @@ void stmmac_dvr_remove(struct device *de
 
 	pm_runtime_get_sync(dev);
 
+#ifdef CONFIG_KSZ_SWITCH
+	sw_mac_remove(ndev, &priv->sw_mac);
+#endif
+
 	stmmac_stop_all_dma(priv);
 	stmmac_mac_set(priv, priv->ioaddr, false);
 	netif_carrier_off(ndev);
@@ -7675,6 +8338,12 @@ int stmmac_suspend(struct device *dev)
 	if (!ndev || !netif_running(ndev))
 		return 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	mutex_lock(&priv->lock);
 
 	netif_device_detach(ndev);
@@ -7782,6 +8451,12 @@ int stmmac_resume(struct device *dev)
 	if (!netif_running(ndev))
 		return 0;
 
+#ifdef CONFIG_KSZ_SWITCH
+	/* Operate only on the main device. */
+	if (is_virt_dev(priv))
+		return 0;
+#endif
+
 	/* Power Down bit, into the PM register, is cleared
 	 * automatically as soon as a magic packet or a Wake-up frame
 	 * is received. Anyway, it's better to manually clear
diff -Napur linux-6.6.6-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c linux-6.6.6/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
--- linux-6.6.6-orig/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c	2023-12-11 01:40:17.000000000 -0800
+++ linux-6.6.6/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c	2023-12-11 10:55:00.485208414 -0800
@@ -444,6 +444,21 @@ static int stmmac_mdio_write_c45(struct
 	return ret;
 }
 
+#ifdef CONFIG_KSZ_SMI
+/* These SMI access functions may require non-standard MDIO signal and so the
+ * standard phy_read and phy_write functions cannot be used.
+ */
+int stmmac_smi_read(struct mii_bus *bus, int phy_id, int regnum)
+{
+	return stmmac_mdio_read(bus, phy_id, regnum);
+}
+
+int stmmac_smi_write(struct mii_bus *bus, int phy_id, int regnum, u16 val)
+{
+	return stmmac_mdio_write(bus, phy_id, regnum, val);
+}
+#endif
+
 /**
  * stmmac_mdio_reset
  * @bus: points to the mii_bus structure
